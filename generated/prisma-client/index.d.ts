// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  home: (where?: HomeWhereInput) => Promise<boolean>;
  music: (where?: MusicWhereInput) => Promise<boolean>;
  musicMark: (where?: MusicMarkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  home: (where: HomeWhereUniqueInput) => HomeNullablePromise;
  homes: (args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Home>;
  homesConnection: (args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HomeConnectionPromise;
  music: (where: MusicWhereUniqueInput) => MusicNullablePromise;
  musics: (args?: {
    where?: MusicWhereInput;
    orderBy?: MusicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Music>;
  musicsConnection: (args?: {
    where?: MusicWhereInput;
    orderBy?: MusicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MusicConnectionPromise;
  musicMark: (where: MusicMarkWhereUniqueInput) => MusicMarkNullablePromise;
  musicMarks: (args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MusicMark>;
  musicMarksConnection: (args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MusicMarkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createHome: (data: HomeCreateInput) => HomePromise;
  updateHome: (args: {
    data: HomeUpdateInput;
    where: HomeWhereUniqueInput;
  }) => HomePromise;
  updateManyHomes: (args: {
    data: HomeUpdateManyMutationInput;
    where?: HomeWhereInput;
  }) => BatchPayloadPromise;
  upsertHome: (args: {
    where: HomeWhereUniqueInput;
    create: HomeCreateInput;
    update: HomeUpdateInput;
  }) => HomePromise;
  deleteHome: (where: HomeWhereUniqueInput) => HomePromise;
  deleteManyHomes: (where?: HomeWhereInput) => BatchPayloadPromise;
  createMusic: (data: MusicCreateInput) => MusicPromise;
  updateMusic: (args: {
    data: MusicUpdateInput;
    where: MusicWhereUniqueInput;
  }) => MusicPromise;
  updateManyMusics: (args: {
    data: MusicUpdateManyMutationInput;
    where?: MusicWhereInput;
  }) => BatchPayloadPromise;
  upsertMusic: (args: {
    where: MusicWhereUniqueInput;
    create: MusicCreateInput;
    update: MusicUpdateInput;
  }) => MusicPromise;
  deleteMusic: (where: MusicWhereUniqueInput) => MusicPromise;
  deleteManyMusics: (where?: MusicWhereInput) => BatchPayloadPromise;
  createMusicMark: (data: MusicMarkCreateInput) => MusicMarkPromise;
  updateMusicMark: (args: {
    data: MusicMarkUpdateInput;
    where: MusicMarkWhereUniqueInput;
  }) => MusicMarkPromise;
  updateManyMusicMarks: (args: {
    data: MusicMarkUpdateManyMutationInput;
    where?: MusicMarkWhereInput;
  }) => BatchPayloadPromise;
  upsertMusicMark: (args: {
    where: MusicMarkWhereUniqueInput;
    create: MusicMarkCreateInput;
    update: MusicMarkUpdateInput;
  }) => MusicMarkPromise;
  deleteMusicMark: (where: MusicMarkWhereUniqueInput) => MusicMarkPromise;
  deleteManyMusicMarks: (where?: MusicMarkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  home: (
    where?: HomeSubscriptionWhereInput
  ) => HomeSubscriptionPayloadSubscription;
  music: (
    where?: MusicSubscriptionWhereInput
  ) => MusicSubscriptionPayloadSubscription;
  musicMark: (
    where?: MusicMarkSubscriptionWhereInput
  ) => MusicMarkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type trackServices = "Soundcloud" | "Spotify" | "Youtube";

export type MusicMarkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "spoiled_ASC"
  | "spoiled_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "isEmailActive_ASC"
  | "isEmailActive_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "isPhoneNumberActive_ASC"
  | "isPhoneNumberActive_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "soundCloudToken_ASC"
  | "soundCloudToken_DESC"
  | "lastLogin_ASC"
  | "lastLogin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MusicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "trackId_ASC"
  | "trackId_DESC"
  | "trackService_ASC"
  | "trackService_DESC"
  | "artwork_ASC"
  | "artwork_DESC"
  | "artist_ASC"
  | "artist_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "trackCreatedAt_ASC"
  | "trackCreatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HomeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MusicMarkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  musics_every?: Maybe<MusicWhereInput>;
  musics_some?: Maybe<MusicWhereInput>;
  musics_none?: Maybe<MusicWhereInput>;
  spoiled?: Maybe<Boolean>;
  spoiled_not?: Maybe<Boolean>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  likedBy_every?: Maybe<UserWhereInput>;
  likedBy_some?: Maybe<UserWhereInput>;
  likedBy_none?: Maybe<UserWhereInput>;
  favouriteFor_every?: Maybe<UserWhereInput>;
  favouriteFor_some?: Maybe<UserWhereInput>;
  favouriteFor_none?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MusicMarkWhereInput[] | MusicMarkWhereInput>;
  OR?: Maybe<MusicMarkWhereInput[] | MusicMarkWhereInput>;
  NOT?: Maybe<MusicMarkWhereInput[] | MusicMarkWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  isEmailActive_not?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  isPhoneNumberActive_not?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  homeLocation?: Maybe<HomeWhereInput>;
  musicMarks_every?: Maybe<MusicMarkWhereInput>;
  musicMarks_some?: Maybe<MusicMarkWhereInput>;
  musicMarks_none?: Maybe<MusicMarkWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  favouriteMarks_every?: Maybe<MusicMarkWhereInput>;
  favouriteMarks_some?: Maybe<MusicMarkWhereInput>;
  favouriteMarks_none?: Maybe<MusicMarkWhereInput>;
  likedMarks_every?: Maybe<MusicMarkWhereInput>;
  likedMarks_some?: Maybe<MusicMarkWhereInput>;
  likedMarks_none?: Maybe<MusicMarkWhereInput>;
  followings_every?: Maybe<UserWhereInput>;
  followings_some?: Maybe<UserWhereInput>;
  followings_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  friends_every?: Maybe<UserWhereInput>;
  friends_some?: Maybe<UserWhereInput>;
  friends_none?: Maybe<UserWhereInput>;
  blockList_every?: Maybe<UserWhereInput>;
  blockList_some?: Maybe<UserWhereInput>;
  blockList_none?: Maybe<UserWhereInput>;
  soundCloudToken?: Maybe<String>;
  soundCloudToken_not?: Maybe<String>;
  soundCloudToken_in?: Maybe<String[] | String>;
  soundCloudToken_not_in?: Maybe<String[] | String>;
  soundCloudToken_lt?: Maybe<String>;
  soundCloudToken_lte?: Maybe<String>;
  soundCloudToken_gt?: Maybe<String>;
  soundCloudToken_gte?: Maybe<String>;
  soundCloudToken_contains?: Maybe<String>;
  soundCloudToken_not_contains?: Maybe<String>;
  soundCloudToken_starts_with?: Maybe<String>;
  soundCloudToken_not_starts_with?: Maybe<String>;
  soundCloudToken_ends_with?: Maybe<String>;
  soundCloudToken_not_ends_with?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
  lastLogin_not?: Maybe<DateTimeInput>;
  lastLogin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLogin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLogin_lt?: Maybe<DateTimeInput>;
  lastLogin_lte?: Maybe<DateTimeInput>;
  lastLogin_gt?: Maybe<DateTimeInput>;
  lastLogin_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface HomeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HomeWhereInput[] | HomeWhereInput>;
  OR?: Maybe<HomeWhereInput[] | HomeWhereInput>;
  NOT?: Maybe<HomeWhereInput[] | HomeWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  musicMark?: Maybe<MusicMarkWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface MusicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  marks?: Maybe<MusicMarkWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  trackId?: Maybe<Int>;
  trackId_not?: Maybe<Int>;
  trackId_in?: Maybe<Int[] | Int>;
  trackId_not_in?: Maybe<Int[] | Int>;
  trackId_lt?: Maybe<Int>;
  trackId_lte?: Maybe<Int>;
  trackId_gt?: Maybe<Int>;
  trackId_gte?: Maybe<Int>;
  trackService?: Maybe<trackServices>;
  trackService_not?: Maybe<trackServices>;
  trackService_in?: Maybe<trackServices[] | trackServices>;
  trackService_not_in?: Maybe<trackServices[] | trackServices>;
  artwork?: Maybe<String>;
  artwork_not?: Maybe<String>;
  artwork_in?: Maybe<String[] | String>;
  artwork_not_in?: Maybe<String[] | String>;
  artwork_lt?: Maybe<String>;
  artwork_lte?: Maybe<String>;
  artwork_gt?: Maybe<String>;
  artwork_gte?: Maybe<String>;
  artwork_contains?: Maybe<String>;
  artwork_not_contains?: Maybe<String>;
  artwork_starts_with?: Maybe<String>;
  artwork_not_starts_with?: Maybe<String>;
  artwork_ends_with?: Maybe<String>;
  artwork_not_ends_with?: Maybe<String>;
  artist?: Maybe<String>;
  artist_not?: Maybe<String>;
  artist_in?: Maybe<String[] | String>;
  artist_not_in?: Maybe<String[] | String>;
  artist_lt?: Maybe<String>;
  artist_lte?: Maybe<String>;
  artist_gt?: Maybe<String>;
  artist_gte?: Maybe<String>;
  artist_contains?: Maybe<String>;
  artist_not_contains?: Maybe<String>;
  artist_starts_with?: Maybe<String>;
  artist_not_starts_with?: Maybe<String>;
  artist_ends_with?: Maybe<String>;
  artist_not_ends_with?: Maybe<String>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  duration?: Maybe<Float>;
  duration_not?: Maybe<Float>;
  duration_in?: Maybe<Float[] | Float>;
  duration_not_in?: Maybe<Float[] | Float>;
  duration_lt?: Maybe<Float>;
  duration_lte?: Maybe<Float>;
  duration_gt?: Maybe<Float>;
  duration_gte?: Maybe<Float>;
  trackCreatedAt?: Maybe<DateTimeInput>;
  trackCreatedAt_not?: Maybe<DateTimeInput>;
  trackCreatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  trackCreatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  trackCreatedAt_lt?: Maybe<DateTimeInput>;
  trackCreatedAt_lte?: Maybe<DateTimeInput>;
  trackCreatedAt_gt?: Maybe<DateTimeInput>;
  trackCreatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MusicWhereInput[] | MusicWhereInput>;
  OR?: Maybe<MusicWhereInput[] | MusicWhereInput>;
  NOT?: Maybe<MusicWhereInput[] | MusicWhereInput>;
}

export type HomeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MusicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MusicMarkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  musicMark: MusicMarkCreateOneWithoutCommentsInput;
  description: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface MusicMarkCreateOneWithoutCommentsInput {
  create?: Maybe<MusicMarkCreateWithoutCommentsInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput>;
}

export interface MusicMarkCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicCreateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  likedBy?: Maybe<UserCreateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserCreateManyWithoutFavouriteMarksInput>;
}

export interface UserCreateOneWithoutMusicMarksInput {
  create?: Maybe<UserCreateWithoutMusicMarksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMusicMarksInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface HomeCreateOneWithoutUserInput {
  create?: Maybe<HomeCreateWithoutUserInput>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  latitude: Float;
  longitude: Float;
  address?: Maybe<String>;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  musicMark: MusicMarkCreateOneWithoutCommentsInput;
  description: String;
}

export interface MusicMarkCreateManyWithoutFavouriteForInput {
  create?: Maybe<
    | MusicMarkCreateWithoutFavouriteForInput[]
    | MusicMarkCreateWithoutFavouriteForInput
  >;
  connect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
}

export interface MusicMarkCreateWithoutFavouriteForInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicCreateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserCreateManyWithoutLikedMarksInput>;
}

export interface MusicCreateManyWithoutMarksInput {
  create?: Maybe<MusicCreateWithoutMarksInput[] | MusicCreateWithoutMarksInput>;
  connect?: Maybe<MusicWhereUniqueInput[] | MusicWhereUniqueInput>;
}

export interface MusicCreateWithoutMarksInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  title?: Maybe<String>;
  trackId: Int;
  trackService: trackServices;
  artwork?: Maybe<String>;
  artist?: Maybe<String>;
  genre?: Maybe<String>;
  duration: Float;
  trackCreatedAt: DateTimeInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface MusicMarkCreateManyWithoutUserInput {
  create?: Maybe<
    MusicMarkCreateWithoutUserInput[] | MusicMarkCreateWithoutUserInput
  >;
  connect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
}

export interface MusicMarkCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  latitude: Float;
  longitude: Float;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicCreateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserCreateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserCreateManyWithoutFavouriteMarksInput>;
}

export interface CommentCreateManyWithoutMusicMarkInput {
  create?: Maybe<
    CommentCreateWithoutMusicMarkInput[] | CommentCreateWithoutMusicMarkInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutMusicMarkInput {
  id?: Maybe<ID_Input>;
  description: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface MusicMarkCreateManyWithoutLikedByInput {
  create?: Maybe<
    MusicMarkCreateWithoutLikedByInput[] | MusicMarkCreateWithoutLikedByInput
  >;
  connect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
}

export interface MusicMarkCreateWithoutLikedByInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicCreateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutMusicMarkInput>;
  favouriteFor?: Maybe<UserCreateManyWithoutFavouriteMarksInput>;
}

export interface UserCreateManyWithoutFavouriteMarksInput {
  create?: Maybe<
    | UserCreateWithoutFavouriteMarksInput[]
    | UserCreateWithoutFavouriteMarksInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFavouriteMarksInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserCreateManyWithoutFriendsInput {
  create?: Maybe<
    UserCreateWithoutFriendsInput[] | UserCreateWithoutFriendsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFriendsInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserCreateManyWithoutFollowingsInput {
  create?: Maybe<
    UserCreateWithoutFollowingsInput[] | UserCreateWithoutFollowingsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingsInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserCreateManyWithoutBlockListInput {
  create?: Maybe<
    UserCreateWithoutBlockListInput[] | UserCreateWithoutBlockListInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlockListInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserCreateManyWithoutLikedMarksInput {
  create?: Maybe<
    UserCreateWithoutLikedMarksInput[] | UserCreateWithoutLikedMarksInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutLikedMarksInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeCreateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface CommentUpdateInput {
  musicMark?: Maybe<MusicMarkUpdateOneRequiredWithoutCommentsInput>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface MusicMarkUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<MusicMarkCreateWithoutCommentsInput>;
  update?: Maybe<MusicMarkUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<MusicMarkUpsertWithoutCommentsInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput>;
}

export interface MusicMarkUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMusicMarksInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicUpdateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserUpdateManyWithoutFavouriteMarksInput>;
}

export interface UserUpdateOneRequiredWithoutMusicMarksInput {
  create?: Maybe<UserCreateWithoutMusicMarksInput>;
  update?: Maybe<UserUpdateWithoutMusicMarksDataInput>;
  upsert?: Maybe<UserUpsertWithoutMusicMarksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMusicMarksDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface HomeUpdateOneWithoutUserInput {
  create?: Maybe<HomeCreateWithoutUserInput>;
  update?: Maybe<HomeUpdateWithoutUserDataInput>;
  upsert?: Maybe<HomeUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeUpdateWithoutUserDataInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  address?: Maybe<String>;
}

export interface HomeUpsertWithoutUserInput {
  update: HomeUpdateWithoutUserDataInput;
  create: HomeCreateWithoutUserInput;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  musicMark?: Maybe<MusicMarkUpdateOneRequiredWithoutCommentsInput>;
  description?: Maybe<String>;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  description?: Maybe<String>;
}

export interface MusicMarkUpdateManyWithoutFavouriteForInput {
  create?: Maybe<
    | MusicMarkCreateWithoutFavouriteForInput[]
    | MusicMarkCreateWithoutFavouriteForInput
  >;
  delete?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  set?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  disconnect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  update?: Maybe<
    | MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput[]
    | MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput
  >;
  upsert?: Maybe<
    | MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput[]
    | MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput
  >;
  deleteMany?: Maybe<MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput>;
  updateMany?: Maybe<
    | MusicMarkUpdateManyWithWhereNestedInput[]
    | MusicMarkUpdateManyWithWhereNestedInput
  >;
}

export interface MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput {
  where: MusicMarkWhereUniqueInput;
  data: MusicMarkUpdateWithoutFavouriteForDataInput;
}

export interface MusicMarkUpdateWithoutFavouriteForDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMusicMarksInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicUpdateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedMarksInput>;
}

export interface MusicUpdateManyWithoutMarksInput {
  create?: Maybe<MusicCreateWithoutMarksInput[] | MusicCreateWithoutMarksInput>;
  delete?: Maybe<MusicWhereUniqueInput[] | MusicWhereUniqueInput>;
  connect?: Maybe<MusicWhereUniqueInput[] | MusicWhereUniqueInput>;
  set?: Maybe<MusicWhereUniqueInput[] | MusicWhereUniqueInput>;
  disconnect?: Maybe<MusicWhereUniqueInput[] | MusicWhereUniqueInput>;
  update?: Maybe<
    | MusicUpdateWithWhereUniqueWithoutMarksInput[]
    | MusicUpdateWithWhereUniqueWithoutMarksInput
  >;
  upsert?: Maybe<
    | MusicUpsertWithWhereUniqueWithoutMarksInput[]
    | MusicUpsertWithWhereUniqueWithoutMarksInput
  >;
  deleteMany?: Maybe<MusicScalarWhereInput[] | MusicScalarWhereInput>;
  updateMany?: Maybe<
    MusicUpdateManyWithWhereNestedInput[] | MusicUpdateManyWithWhereNestedInput
  >;
}

export interface MusicUpdateWithWhereUniqueWithoutMarksInput {
  where: MusicWhereUniqueInput;
  data: MusicUpdateWithoutMarksDataInput;
}

export interface MusicUpdateWithoutMarksDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  trackId?: Maybe<Int>;
  trackService?: Maybe<trackServices>;
  artwork?: Maybe<String>;
  artist?: Maybe<String>;
  genre?: Maybe<String>;
  duration?: Maybe<Float>;
  trackCreatedAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface MusicMarkUpdateManyWithoutUserInput {
  create?: Maybe<
    MusicMarkCreateWithoutUserInput[] | MusicMarkCreateWithoutUserInput
  >;
  delete?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  set?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  disconnect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  update?: Maybe<
    | MusicMarkUpdateWithWhereUniqueWithoutUserInput[]
    | MusicMarkUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | MusicMarkUpsertWithWhereUniqueWithoutUserInput[]
    | MusicMarkUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput>;
  updateMany?: Maybe<
    | MusicMarkUpdateManyWithWhereNestedInput[]
    | MusicMarkUpdateManyWithWhereNestedInput
  >;
}

export interface MusicMarkUpdateWithWhereUniqueWithoutUserInput {
  where: MusicMarkWhereUniqueInput;
  data: MusicMarkUpdateWithoutUserDataInput;
}

export interface MusicMarkUpdateWithoutUserDataInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicUpdateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserUpdateManyWithoutFavouriteMarksInput>;
}

export interface CommentUpdateManyWithoutMusicMarkInput {
  create?: Maybe<
    CommentCreateWithoutMusicMarkInput[] | CommentCreateWithoutMusicMarkInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutMusicMarkInput[]
    | CommentUpdateWithWhereUniqueWithoutMusicMarkInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutMusicMarkInput[]
    | CommentUpsertWithWhereUniqueWithoutMusicMarkInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutMusicMarkInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutMusicMarkDataInput;
}

export interface CommentUpdateWithoutMusicMarkDataInput {
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface MusicMarkUpdateManyWithoutLikedByInput {
  create?: Maybe<
    MusicMarkCreateWithoutLikedByInput[] | MusicMarkCreateWithoutLikedByInput
  >;
  delete?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  set?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  disconnect?: Maybe<MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput>;
  update?: Maybe<
    | MusicMarkUpdateWithWhereUniqueWithoutLikedByInput[]
    | MusicMarkUpdateWithWhereUniqueWithoutLikedByInput
  >;
  upsert?: Maybe<
    | MusicMarkUpsertWithWhereUniqueWithoutLikedByInput[]
    | MusicMarkUpsertWithWhereUniqueWithoutLikedByInput
  >;
  deleteMany?: Maybe<MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput>;
  updateMany?: Maybe<
    | MusicMarkUpdateManyWithWhereNestedInput[]
    | MusicMarkUpdateManyWithWhereNestedInput
  >;
}

export interface MusicMarkUpdateWithWhereUniqueWithoutLikedByInput {
  where: MusicMarkWhereUniqueInput;
  data: MusicMarkUpdateWithoutLikedByDataInput;
}

export interface MusicMarkUpdateWithoutLikedByDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMusicMarksInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicUpdateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutMusicMarkInput>;
  favouriteFor?: Maybe<UserUpdateManyWithoutFavouriteMarksInput>;
}

export interface UserUpdateManyWithoutFavouriteMarksInput {
  create?: Maybe<
    | UserCreateWithoutFavouriteMarksInput[]
    | UserCreateWithoutFavouriteMarksInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFavouriteMarksInput[]
    | UserUpdateWithWhereUniqueWithoutFavouriteMarksInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFavouriteMarksInput[]
    | UserUpsertWithWhereUniqueWithoutFavouriteMarksInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFavouriteMarksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFavouriteMarksDataInput;
}

export interface UserUpdateWithoutFavouriteMarksDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithoutFriendsInput {
  create?: Maybe<
    UserCreateWithoutFriendsInput[] | UserCreateWithoutFriendsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFriendsInput[]
    | UserUpdateWithWhereUniqueWithoutFriendsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFriendsInput[]
    | UserUpsertWithWhereUniqueWithoutFriendsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFriendsDataInput;
}

export interface UserUpdateWithoutFriendsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithoutFollowingsInput {
  create?: Maybe<
    UserCreateWithoutFollowingsInput[] | UserCreateWithoutFollowingsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingsInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingsInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingsDataInput;
}

export interface UserUpdateWithoutFollowingsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithoutBlockListInput {
  create?: Maybe<
    UserCreateWithoutBlockListInput[] | UserCreateWithoutBlockListInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutBlockListInput[]
    | UserUpdateWithWhereUniqueWithoutBlockListInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutBlockListInput[]
    | UserUpsertWithWhereUniqueWithoutBlockListInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutBlockListInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockListDataInput;
}

export interface UserUpdateWithoutBlockListDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithWhereUniqueWithoutBlockListInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockListDataInput;
  create: UserCreateWithoutBlockListInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  isEmailActive_not?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  isPhoneNumberActive_not?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  soundCloudToken?: Maybe<String>;
  soundCloudToken_not?: Maybe<String>;
  soundCloudToken_in?: Maybe<String[] | String>;
  soundCloudToken_not_in?: Maybe<String[] | String>;
  soundCloudToken_lt?: Maybe<String>;
  soundCloudToken_lte?: Maybe<String>;
  soundCloudToken_gt?: Maybe<String>;
  soundCloudToken_gte?: Maybe<String>;
  soundCloudToken_contains?: Maybe<String>;
  soundCloudToken_not_contains?: Maybe<String>;
  soundCloudToken_starts_with?: Maybe<String>;
  soundCloudToken_not_starts_with?: Maybe<String>;
  soundCloudToken_ends_with?: Maybe<String>;
  soundCloudToken_not_ends_with?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
  lastLogin_not?: Maybe<DateTimeInput>;
  lastLogin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLogin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLogin_lt?: Maybe<DateTimeInput>;
  lastLogin_lte?: Maybe<DateTimeInput>;
  lastLogin_gt?: Maybe<DateTimeInput>;
  lastLogin_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingsDataInput;
  create: UserCreateWithoutFollowingsInput;
}

export interface UserUpsertWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFriendsDataInput;
  create: UserCreateWithoutFriendsInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithWhereUniqueWithoutFavouriteMarksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFavouriteMarksDataInput;
  create: UserCreateWithoutFavouriteMarksInput;
}

export interface MusicMarkUpsertWithWhereUniqueWithoutLikedByInput {
  where: MusicMarkWhereUniqueInput;
  update: MusicMarkUpdateWithoutLikedByDataInput;
  create: MusicMarkCreateWithoutLikedByInput;
}

export interface MusicMarkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  spoiled?: Maybe<Boolean>;
  spoiled_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput>;
  OR?: Maybe<MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput>;
  NOT?: Maybe<MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput>;
}

export interface MusicMarkUpdateManyWithWhereNestedInput {
  where: MusicMarkScalarWhereInput;
  data: MusicMarkUpdateManyDataInput;
}

export interface MusicMarkUpdateManyDataInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  spoiled?: Maybe<Boolean>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutMusicMarkInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutMusicMarkDataInput;
  create: CommentCreateWithoutMusicMarkInput;
}

export interface UserUpdateManyWithoutLikedMarksInput {
  create?: Maybe<
    UserCreateWithoutLikedMarksInput[] | UserCreateWithoutLikedMarksInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutLikedMarksInput[]
    | UserUpdateWithWhereUniqueWithoutLikedMarksInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutLikedMarksInput[]
    | UserUpsertWithWhereUniqueWithoutLikedMarksInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutLikedMarksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutLikedMarksDataInput;
}

export interface UserUpdateWithoutLikedMarksDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithWhereUniqueWithoutLikedMarksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutLikedMarksDataInput;
  create: UserCreateWithoutLikedMarksInput;
}

export interface MusicMarkUpsertWithWhereUniqueWithoutUserInput {
  where: MusicMarkWhereUniqueInput;
  update: MusicMarkUpdateWithoutUserDataInput;
  create: MusicMarkCreateWithoutUserInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MusicUpsertWithWhereUniqueWithoutMarksInput {
  where: MusicWhereUniqueInput;
  update: MusicUpdateWithoutMarksDataInput;
  create: MusicCreateWithoutMarksInput;
}

export interface MusicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  trackId?: Maybe<Int>;
  trackId_not?: Maybe<Int>;
  trackId_in?: Maybe<Int[] | Int>;
  trackId_not_in?: Maybe<Int[] | Int>;
  trackId_lt?: Maybe<Int>;
  trackId_lte?: Maybe<Int>;
  trackId_gt?: Maybe<Int>;
  trackId_gte?: Maybe<Int>;
  trackService?: Maybe<trackServices>;
  trackService_not?: Maybe<trackServices>;
  trackService_in?: Maybe<trackServices[] | trackServices>;
  trackService_not_in?: Maybe<trackServices[] | trackServices>;
  artwork?: Maybe<String>;
  artwork_not?: Maybe<String>;
  artwork_in?: Maybe<String[] | String>;
  artwork_not_in?: Maybe<String[] | String>;
  artwork_lt?: Maybe<String>;
  artwork_lte?: Maybe<String>;
  artwork_gt?: Maybe<String>;
  artwork_gte?: Maybe<String>;
  artwork_contains?: Maybe<String>;
  artwork_not_contains?: Maybe<String>;
  artwork_starts_with?: Maybe<String>;
  artwork_not_starts_with?: Maybe<String>;
  artwork_ends_with?: Maybe<String>;
  artwork_not_ends_with?: Maybe<String>;
  artist?: Maybe<String>;
  artist_not?: Maybe<String>;
  artist_in?: Maybe<String[] | String>;
  artist_not_in?: Maybe<String[] | String>;
  artist_lt?: Maybe<String>;
  artist_lte?: Maybe<String>;
  artist_gt?: Maybe<String>;
  artist_gte?: Maybe<String>;
  artist_contains?: Maybe<String>;
  artist_not_contains?: Maybe<String>;
  artist_starts_with?: Maybe<String>;
  artist_not_starts_with?: Maybe<String>;
  artist_ends_with?: Maybe<String>;
  artist_not_ends_with?: Maybe<String>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  duration?: Maybe<Float>;
  duration_not?: Maybe<Float>;
  duration_in?: Maybe<Float[] | Float>;
  duration_not_in?: Maybe<Float[] | Float>;
  duration_lt?: Maybe<Float>;
  duration_lte?: Maybe<Float>;
  duration_gt?: Maybe<Float>;
  duration_gte?: Maybe<Float>;
  trackCreatedAt?: Maybe<DateTimeInput>;
  trackCreatedAt_not?: Maybe<DateTimeInput>;
  trackCreatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  trackCreatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  trackCreatedAt_lt?: Maybe<DateTimeInput>;
  trackCreatedAt_lte?: Maybe<DateTimeInput>;
  trackCreatedAt_gt?: Maybe<DateTimeInput>;
  trackCreatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MusicScalarWhereInput[] | MusicScalarWhereInput>;
  OR?: Maybe<MusicScalarWhereInput[] | MusicScalarWhereInput>;
  NOT?: Maybe<MusicScalarWhereInput[] | MusicScalarWhereInput>;
}

export interface MusicUpdateManyWithWhereNestedInput {
  where: MusicScalarWhereInput;
  data: MusicUpdateManyDataInput;
}

export interface MusicUpdateManyDataInput {
  title?: Maybe<String>;
  trackId?: Maybe<Int>;
  trackService?: Maybe<trackServices>;
  artwork?: Maybe<String>;
  artist?: Maybe<String>;
  genre?: Maybe<String>;
  duration?: Maybe<Float>;
  trackCreatedAt?: Maybe<DateTimeInput>;
}

export interface MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput {
  where: MusicMarkWhereUniqueInput;
  update: MusicMarkUpdateWithoutFavouriteForDataInput;
  create: MusicMarkCreateWithoutFavouriteForInput;
}

export interface UserUpsertWithoutMusicMarksInput {
  update: UserUpdateWithoutMusicMarksDataInput;
  create: UserCreateWithoutMusicMarksInput;
}

export interface MusicMarkUpsertWithoutCommentsInput {
  update: MusicMarkUpdateWithoutCommentsDataInput;
  create: MusicMarkCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  description?: Maybe<String>;
}

export interface HomeCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutHomeLocationInput;
  latitude: Float;
  longitude: Float;
  address?: Maybe<String>;
}

export interface UserCreateOneWithoutHomeLocationInput {
  create?: Maybe<UserCreateWithoutHomeLocationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutHomeLocationInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  musicMarks?: Maybe<MusicMarkCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkCreateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkCreateManyWithoutLikedByInput>;
  followings?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingsInput>;
  friends?: Maybe<UserCreateManyWithoutFriendsInput>;
  blockList?: Maybe<UserCreateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface HomeUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutHomeLocationInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  address?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutHomeLocationInput {
  create?: Maybe<UserCreateWithoutHomeLocationInput>;
  update?: Maybe<UserUpdateWithoutHomeLocationDataInput>;
  upsert?: Maybe<UserUpsertWithoutHomeLocationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutHomeLocationDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutHomeLocationInput {
  update: UserUpdateWithoutHomeLocationDataInput;
  create: UserCreateWithoutHomeLocationInput;
}

export interface HomeUpdateManyMutationInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  address?: Maybe<String>;
}

export interface MusicCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  marks: MusicMarkCreateOneWithoutMusicsInput;
  title?: Maybe<String>;
  trackId: Int;
  trackService: trackServices;
  artwork?: Maybe<String>;
  artist?: Maybe<String>;
  genre?: Maybe<String>;
  duration: Float;
  trackCreatedAt: DateTimeInput;
}

export interface MusicMarkCreateOneWithoutMusicsInput {
  create?: Maybe<MusicMarkCreateWithoutMusicsInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput>;
}

export interface MusicMarkCreateWithoutMusicsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: Maybe<String>;
  description?: Maybe<String>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserCreateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserCreateManyWithoutFavouriteMarksInput>;
}

export interface MusicUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  marks?: Maybe<MusicMarkUpdateOneRequiredWithoutMusicsInput>;
  title?: Maybe<String>;
  trackId?: Maybe<Int>;
  trackService?: Maybe<trackServices>;
  artwork?: Maybe<String>;
  artist?: Maybe<String>;
  genre?: Maybe<String>;
  duration?: Maybe<Float>;
  trackCreatedAt?: Maybe<DateTimeInput>;
}

export interface MusicMarkUpdateOneRequiredWithoutMusicsInput {
  create?: Maybe<MusicMarkCreateWithoutMusicsInput>;
  update?: Maybe<MusicMarkUpdateWithoutMusicsDataInput>;
  upsert?: Maybe<MusicMarkUpsertWithoutMusicsInput>;
  connect?: Maybe<MusicMarkWhereUniqueInput>;
}

export interface MusicMarkUpdateWithoutMusicsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMusicMarksInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserUpdateManyWithoutFavouriteMarksInput>;
}

export interface MusicMarkUpsertWithoutMusicsInput {
  update: MusicMarkUpdateWithoutMusicsDataInput;
  create: MusicMarkCreateWithoutMusicsInput;
}

export interface MusicUpdateManyMutationInput {
  title?: Maybe<String>;
  trackId?: Maybe<Int>;
  trackService?: Maybe<trackServices>;
  artwork?: Maybe<String>;
  artist?: Maybe<String>;
  genre?: Maybe<String>;
  duration?: Maybe<Float>;
  trackCreatedAt?: Maybe<DateTimeInput>;
}

export interface MusicMarkCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicCreateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserCreateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserCreateManyWithoutFavouriteMarksInput>;
}

export interface MusicMarkUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMusicMarksInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  musics?: Maybe<MusicUpdateManyWithoutMarksInput>;
  spoiled?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutMusicMarkInput>;
  likedBy?: Maybe<UserUpdateManyWithoutLikedMarksInput>;
  favouriteFor?: Maybe<UserUpdateManyWithoutFavouriteMarksInput>;
}

export interface MusicMarkUpdateManyMutationInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  spoiled?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  homeLocation?: Maybe<HomeUpdateOneWithoutUserInput>;
  musicMarks?: Maybe<MusicMarkUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  favouriteMarks?: Maybe<MusicMarkUpdateManyWithoutFavouriteForInput>;
  likedMarks?: Maybe<MusicMarkUpdateManyWithoutLikedByInput>;
  followings?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingsInput>;
  friends?: Maybe<UserUpdateManyWithoutFriendsInput>;
  blockList?: Maybe<UserUpdateManyWithoutBlockListInput>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  isEmailActive?: Maybe<Boolean>;
  phoneNumber?: Maybe<String>;
  isPhoneNumberActive?: Maybe<Boolean>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  soundCloudToken?: Maybe<String>;
  lastLogin?: Maybe<DateTimeInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface HomeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HomeWhereInput>;
  AND?: Maybe<HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput>;
  OR?: Maybe<HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput>;
  NOT?: Maybe<HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput>;
}

export interface MusicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MusicWhereInput>;
  AND?: Maybe<MusicSubscriptionWhereInput[] | MusicSubscriptionWhereInput>;
  OR?: Maybe<MusicSubscriptionWhereInput[] | MusicSubscriptionWhereInput>;
  NOT?: Maybe<MusicSubscriptionWhereInput[] | MusicSubscriptionWhereInput>;
}

export interface MusicMarkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MusicMarkWhereInput>;
  AND?: Maybe<
    MusicMarkSubscriptionWhereInput[] | MusicMarkSubscriptionWhereInput
  >;
  OR?: Maybe<
    MusicMarkSubscriptionWhereInput[] | MusicMarkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MusicMarkSubscriptionWhereInput[] | MusicMarkSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  musicMark: <T = MusicMarkPromise>() => T;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  musicMark: <T = MusicMarkSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  musicMark: <T = MusicMarkPromise>() => T;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicMark {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  spoiled: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicMarkPromise extends Promise<MusicMark>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  musics: <T = FragmentableArray<Music>>(args?: {
    where?: MusicWhereInput;
    orderBy?: MusicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  spoiled: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favouriteFor: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicMarkSubscription
  extends Promise<AsyncIterator<MusicMark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  musics: <T = Promise<AsyncIterator<MusicSubscription>>>(args?: {
    where?: MusicWhereInput;
    orderBy?: MusicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  spoiled: () => Promise<AsyncIterator<Boolean>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favouriteFor: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MusicMarkNullablePromise
  extends Promise<MusicMark | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  musics: <T = FragmentableArray<Music>>(args?: {
    where?: MusicWhereInput;
    orderBy?: MusicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  spoiled: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favouriteFor: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  email?: String;
  isEmailActive: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive: Boolean;
  firstName?: String;
  lastName?: String;
  soundCloudToken?: String;
  lastLogin?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  isEmailActive: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  isPhoneNumberActive: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  homeLocation: <T = HomePromise>() => T;
  musicMarks: <T = FragmentableArray<MusicMark>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favouriteMarks: <T = FragmentableArray<MusicMark>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedMarks: <T = FragmentableArray<MusicMark>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followings: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockList: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  soundCloudToken: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  isEmailActive: () => Promise<AsyncIterator<Boolean>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  isPhoneNumberActive: () => Promise<AsyncIterator<Boolean>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  homeLocation: <T = HomeSubscription>() => T;
  musicMarks: <T = Promise<AsyncIterator<MusicMarkSubscription>>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favouriteMarks: <T = Promise<AsyncIterator<MusicMarkSubscription>>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedMarks: <T = Promise<AsyncIterator<MusicMarkSubscription>>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followings: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockList: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  soundCloudToken: () => Promise<AsyncIterator<String>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  isEmailActive: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  isPhoneNumberActive: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  homeLocation: <T = HomePromise>() => T;
  musicMarks: <T = FragmentableArray<MusicMark>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favouriteMarks: <T = FragmentableArray<MusicMark>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedMarks: <T = FragmentableArray<MusicMark>>(args?: {
    where?: MusicMarkWhereInput;
    orderBy?: MusicMarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followings: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  friends: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockList: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  soundCloudToken: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Home {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HomePromise extends Promise<Home>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HomeSubscription
  extends Promise<AsyncIterator<Home>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HomeNullablePromise
  extends Promise<Home | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Music {
  id: ID_Output;
  title?: String;
  trackId: Int;
  trackService: trackServices;
  artwork?: String;
  artist?: String;
  genre?: String;
  duration: Float;
  trackCreatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicPromise extends Promise<Music>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  marks: <T = MusicMarkPromise>() => T;
  title: () => Promise<String>;
  trackId: () => Promise<Int>;
  trackService: () => Promise<trackServices>;
  artwork: () => Promise<String>;
  artist: () => Promise<String>;
  genre: () => Promise<String>;
  duration: () => Promise<Float>;
  trackCreatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicSubscription
  extends Promise<AsyncIterator<Music>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  marks: <T = MusicMarkSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  trackId: () => Promise<AsyncIterator<Int>>;
  trackService: () => Promise<AsyncIterator<trackServices>>;
  artwork: () => Promise<AsyncIterator<String>>;
  artist: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  trackCreatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MusicNullablePromise
  extends Promise<Music | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  marks: <T = MusicMarkPromise>() => T;
  title: () => Promise<String>;
  trackId: () => Promise<Int>;
  trackService: () => Promise<trackServices>;
  artwork: () => Promise<String>;
  artist: () => Promise<String>;
  genre: () => Promise<String>;
  duration: () => Promise<Float>;
  trackCreatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HomeConnection {
  pageInfo: PageInfo;
  edges: HomeEdge[];
}

export interface HomeConnectionPromise
  extends Promise<HomeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HomeEdge>>() => T;
  aggregate: <T = AggregateHomePromise>() => T;
}

export interface HomeConnectionSubscription
  extends Promise<AsyncIterator<HomeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HomeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHomeSubscription>() => T;
}

export interface HomeEdge {
  node: Home;
  cursor: String;
}

export interface HomeEdgePromise extends Promise<HomeEdge>, Fragmentable {
  node: <T = HomePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HomeEdgeSubscription
  extends Promise<AsyncIterator<HomeEdge>>,
    Fragmentable {
  node: <T = HomeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHome {
  count: Int;
}

export interface AggregateHomePromise
  extends Promise<AggregateHome>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHomeSubscription
  extends Promise<AsyncIterator<AggregateHome>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MusicConnection {
  pageInfo: PageInfo;
  edges: MusicEdge[];
}

export interface MusicConnectionPromise
  extends Promise<MusicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MusicEdge>>() => T;
  aggregate: <T = AggregateMusicPromise>() => T;
}

export interface MusicConnectionSubscription
  extends Promise<AsyncIterator<MusicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MusicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMusicSubscription>() => T;
}

export interface MusicEdge {
  node: Music;
  cursor: String;
}

export interface MusicEdgePromise extends Promise<MusicEdge>, Fragmentable {
  node: <T = MusicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MusicEdgeSubscription
  extends Promise<AsyncIterator<MusicEdge>>,
    Fragmentable {
  node: <T = MusicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMusic {
  count: Int;
}

export interface AggregateMusicPromise
  extends Promise<AggregateMusic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMusicSubscription
  extends Promise<AsyncIterator<AggregateMusic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MusicMarkConnection {
  pageInfo: PageInfo;
  edges: MusicMarkEdge[];
}

export interface MusicMarkConnectionPromise
  extends Promise<MusicMarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MusicMarkEdge>>() => T;
  aggregate: <T = AggregateMusicMarkPromise>() => T;
}

export interface MusicMarkConnectionSubscription
  extends Promise<AsyncIterator<MusicMarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MusicMarkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMusicMarkSubscription>() => T;
}

export interface MusicMarkEdge {
  node: MusicMark;
  cursor: String;
}

export interface MusicMarkEdgePromise
  extends Promise<MusicMarkEdge>,
    Fragmentable {
  node: <T = MusicMarkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MusicMarkEdgeSubscription
  extends Promise<AsyncIterator<MusicMarkEdge>>,
    Fragmentable {
  node: <T = MusicMarkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMusicMark {
  count: Int;
}

export interface AggregateMusicMarkPromise
  extends Promise<AggregateMusicMark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMusicMarkSubscription
  extends Promise<AsyncIterator<AggregateMusicMark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HomeSubscriptionPayload {
  mutation: MutationType;
  node: Home;
  updatedFields: String[];
  previousValues: HomePreviousValues;
}

export interface HomeSubscriptionPayloadPromise
  extends Promise<HomeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HomePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HomePreviousValuesPromise>() => T;
}

export interface HomeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HomeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HomeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HomePreviousValuesSubscription>() => T;
}

export interface HomePreviousValues {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HomePreviousValuesPromise
  extends Promise<HomePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HomePreviousValuesSubscription
  extends Promise<AsyncIterator<HomePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MusicSubscriptionPayload {
  mutation: MutationType;
  node: Music;
  updatedFields: String[];
  previousValues: MusicPreviousValues;
}

export interface MusicSubscriptionPayloadPromise
  extends Promise<MusicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MusicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MusicPreviousValuesPromise>() => T;
}

export interface MusicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MusicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MusicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MusicPreviousValuesSubscription>() => T;
}

export interface MusicPreviousValues {
  id: ID_Output;
  title?: String;
  trackId: Int;
  trackService: trackServices;
  artwork?: String;
  artist?: String;
  genre?: String;
  duration: Float;
  trackCreatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicPreviousValuesPromise
  extends Promise<MusicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  trackId: () => Promise<Int>;
  trackService: () => Promise<trackServices>;
  artwork: () => Promise<String>;
  artist: () => Promise<String>;
  genre: () => Promise<String>;
  duration: () => Promise<Float>;
  trackCreatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicPreviousValuesSubscription
  extends Promise<AsyncIterator<MusicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  trackId: () => Promise<AsyncIterator<Int>>;
  trackService: () => Promise<AsyncIterator<trackServices>>;
  artwork: () => Promise<AsyncIterator<String>>;
  artist: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  trackCreatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MusicMarkSubscriptionPayload {
  mutation: MutationType;
  node: MusicMark;
  updatedFields: String[];
  previousValues: MusicMarkPreviousValues;
}

export interface MusicMarkSubscriptionPayloadPromise
  extends Promise<MusicMarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MusicMarkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MusicMarkPreviousValuesPromise>() => T;
}

export interface MusicMarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MusicMarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MusicMarkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MusicMarkPreviousValuesSubscription>() => T;
}

export interface MusicMarkPreviousValues {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  spoiled: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicMarkPreviousValuesPromise
  extends Promise<MusicMarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  spoiled: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicMarkPreviousValuesSubscription
  extends Promise<AsyncIterator<MusicMarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  spoiled: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  email?: String;
  isEmailActive: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive: Boolean;
  firstName?: String;
  lastName?: String;
  soundCloudToken?: String;
  lastLogin?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  isEmailActive: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  isPhoneNumberActive: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  soundCloudToken: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  isEmailActive: () => Promise<AsyncIterator<Boolean>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  isPhoneNumberActive: () => Promise<AsyncIterator<Boolean>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  soundCloudToken: () => Promise<AsyncIterator<String>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Home",
    embedded: false
  },
  {
    name: "trackServices",
    embedded: false
  },
  {
    name: "Music",
    embedded: false
  },
  {
    name: "MusicMark",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
