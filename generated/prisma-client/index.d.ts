// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  home: (where?: HomeWhereInput) => Promise<boolean>;
  music: (where?: MusicWhereInput) => Promise<boolean>;
  musicMark: (where?: MusicMarkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  home: (where: HomeWhereUniqueInput) => HomePromise;
  homes: (
    args?: {
      where?: HomeWhereInput;
      orderBy?: HomeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Home>;
  homesConnection: (
    args?: {
      where?: HomeWhereInput;
      orderBy?: HomeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => HomeConnectionPromise;
  music: (where: MusicWhereUniqueInput) => MusicPromise;
  musics: (
    args?: {
      where?: MusicWhereInput;
      orderBy?: MusicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Music>;
  musicsConnection: (
    args?: {
      where?: MusicWhereInput;
      orderBy?: MusicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MusicConnectionPromise;
  musicMark: (where: MusicMarkWhereUniqueInput) => MusicMarkPromise;
  musicMarks: (
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MusicMark>;
  musicMarksConnection: (
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MusicMarkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createHome: (data: HomeCreateInput) => HomePromise;
  updateHome: (
    args: { data: HomeUpdateInput; where: HomeWhereUniqueInput }
  ) => HomePromise;
  updateManyHomes: (
    args: { data: HomeUpdateManyMutationInput; where?: HomeWhereInput }
  ) => BatchPayloadPromise;
  upsertHome: (
    args: {
      where: HomeWhereUniqueInput;
      create: HomeCreateInput;
      update: HomeUpdateInput;
    }
  ) => HomePromise;
  deleteHome: (where: HomeWhereUniqueInput) => HomePromise;
  deleteManyHomes: (where?: HomeWhereInput) => BatchPayloadPromise;
  createMusic: (data: MusicCreateInput) => MusicPromise;
  updateMusic: (
    args: { data: MusicUpdateInput; where: MusicWhereUniqueInput }
  ) => MusicPromise;
  updateManyMusics: (
    args: { data: MusicUpdateManyMutationInput; where?: MusicWhereInput }
  ) => BatchPayloadPromise;
  upsertMusic: (
    args: {
      where: MusicWhereUniqueInput;
      create: MusicCreateInput;
      update: MusicUpdateInput;
    }
  ) => MusicPromise;
  deleteMusic: (where: MusicWhereUniqueInput) => MusicPromise;
  deleteManyMusics: (where?: MusicWhereInput) => BatchPayloadPromise;
  createMusicMark: (data: MusicMarkCreateInput) => MusicMarkPromise;
  updateMusicMark: (
    args: { data: MusicMarkUpdateInput; where: MusicMarkWhereUniqueInput }
  ) => MusicMarkPromise;
  updateManyMusicMarks: (
    args: {
      data: MusicMarkUpdateManyMutationInput;
      where?: MusicMarkWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMusicMark: (
    args: {
      where: MusicMarkWhereUniqueInput;
      create: MusicMarkCreateInput;
      update: MusicMarkUpdateInput;
    }
  ) => MusicMarkPromise;
  deleteMusicMark: (where: MusicMarkWhereUniqueInput) => MusicMarkPromise;
  deleteManyMusicMarks: (where?: MusicMarkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  home: (
    where?: HomeSubscriptionWhereInput
  ) => HomeSubscriptionPayloadSubscription;
  music: (
    where?: MusicSubscriptionWhereInput
  ) => MusicSubscriptionPayloadSubscription;
  musicMark: (
    where?: MusicMarkSubscriptionWhereInput
  ) => MusicMarkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MusicMarkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "spoiled_ASC"
  | "spoiled_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "isEmailActive_ASC"
  | "isEmailActive_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "isPhoneNumberActive_ASC"
  | "isPhoneNumberActive_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "soundCloudToken_ASC"
  | "soundCloudToken_DESC"
  | "lastLogin_ASC"
  | "lastLogin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MusicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "singer_ASC"
  | "singer_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HomeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MusicMarkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  musics_every?: MusicWhereInput;
  musics_some?: MusicWhereInput;
  musics_none?: MusicWhereInput;
  spoiled?: Boolean;
  spoiled_not?: Boolean;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  likedBy_every?: UserWhereInput;
  likedBy_some?: UserWhereInput;
  likedBy_none?: UserWhereInput;
  favouriteFor_every?: UserWhereInput;
  favouriteFor_some?: UserWhereInput;
  favouriteFor_none?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MusicMarkWhereInput[] | MusicMarkWhereInput;
  OR?: MusicMarkWhereInput[] | MusicMarkWhereInput;
  NOT?: MusicMarkWhereInput[] | MusicMarkWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  isEmailActive?: Boolean;
  isEmailActive_not?: Boolean;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  isPhoneNumberActive?: Boolean;
  isPhoneNumberActive_not?: Boolean;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  homeLocation?: HomeWhereInput;
  musicMarks_every?: MusicMarkWhereInput;
  musicMarks_some?: MusicMarkWhereInput;
  musicMarks_none?: MusicMarkWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  favouriteMarks_every?: MusicMarkWhereInput;
  favouriteMarks_some?: MusicMarkWhereInput;
  favouriteMarks_none?: MusicMarkWhereInput;
  likedMarks_every?: MusicMarkWhereInput;
  likedMarks_some?: MusicMarkWhereInput;
  likedMarks_none?: MusicMarkWhereInput;
  followings_every?: UserWhereInput;
  followings_some?: UserWhereInput;
  followings_none?: UserWhereInput;
  followers_every?: UserWhereInput;
  followers_some?: UserWhereInput;
  followers_none?: UserWhereInput;
  friends_every?: UserWhereInput;
  friends_some?: UserWhereInput;
  friends_none?: UserWhereInput;
  blockList_every?: UserWhereInput;
  blockList_some?: UserWhereInput;
  blockList_none?: UserWhereInput;
  soundCloudToken?: String;
  soundCloudToken_not?: String;
  soundCloudToken_in?: String[] | String;
  soundCloudToken_not_in?: String[] | String;
  soundCloudToken_lt?: String;
  soundCloudToken_lte?: String;
  soundCloudToken_gt?: String;
  soundCloudToken_gte?: String;
  soundCloudToken_contains?: String;
  soundCloudToken_not_contains?: String;
  soundCloudToken_starts_with?: String;
  soundCloudToken_not_starts_with?: String;
  soundCloudToken_ends_with?: String;
  soundCloudToken_not_ends_with?: String;
  lastLogin?: DateTimeInput;
  lastLogin_not?: DateTimeInput;
  lastLogin_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_not_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_lt?: DateTimeInput;
  lastLogin_lte?: DateTimeInput;
  lastLogin_gt?: DateTimeInput;
  lastLogin_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface HomeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: HomeWhereInput[] | HomeWhereInput;
  OR?: HomeWhereInput[] | HomeWhereInput;
  NOT?: HomeWhereInput[] | HomeWhereInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  musicMark?: MusicMarkWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface MusicWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  marks?: MusicMarkWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  singer?: String;
  singer_not?: String;
  singer_in?: String[] | String;
  singer_not_in?: String[] | String;
  singer_lt?: String;
  singer_lte?: String;
  singer_gt?: String;
  singer_gte?: String;
  singer_contains?: String;
  singer_not_contains?: String;
  singer_starts_with?: String;
  singer_not_starts_with?: String;
  singer_ends_with?: String;
  singer_not_ends_with?: String;
  duration?: Float;
  duration_not?: Float;
  duration_in?: Float[] | Float;
  duration_not_in?: Float[] | Float;
  duration_lt?: Float;
  duration_lte?: Float;
  duration_gt?: Float;
  duration_gte?: Float;
  uri?: String;
  uri_not?: String;
  uri_in?: String[] | String;
  uri_not_in?: String[] | String;
  uri_lt?: String;
  uri_lte?: String;
  uri_gt?: String;
  uri_gte?: String;
  uri_contains?: String;
  uri_not_contains?: String;
  uri_starts_with?: String;
  uri_not_starts_with?: String;
  uri_ends_with?: String;
  uri_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MusicWhereInput[] | MusicWhereInput;
  OR?: MusicWhereInput[] | MusicWhereInput;
  NOT?: MusicWhereInput[] | MusicWhereInput;
}

export type HomeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MusicWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MusicMarkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
  phoneNumber?: String;
}>;

export interface CommentCreateInput {
  musicMark: MusicMarkCreateOneWithoutCommentsInput;
  description: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface MusicMarkCreateOneWithoutCommentsInput {
  create?: MusicMarkCreateWithoutCommentsInput;
  connect?: MusicMarkWhereUniqueInput;
}

export interface MusicMarkCreateWithoutCommentsInput {
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  musics?: MusicCreateManyWithoutMarksInput;
  spoiled?: Boolean;
  likedBy?: UserCreateManyWithoutLikedMarksInput;
  favouriteFor?: UserCreateManyWithoutFavouriteMarksInput;
}

export interface UserCreateOneWithoutMusicMarksInput {
  create?: UserCreateWithoutMusicMarksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutMusicMarksInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface HomeCreateOneWithoutUserInput {
  create?: HomeCreateWithoutUserInput;
  connect?: HomeWhereUniqueInput;
}

export interface HomeCreateWithoutUserInput {
  latitude: Float;
  longitude: Float;
  address?: String;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutAuthorInput {
  musicMark: MusicMarkCreateOneWithoutCommentsInput;
  description: String;
}

export interface MusicMarkCreateManyWithoutFavouriteForInput {
  create?:
    | MusicMarkCreateWithoutFavouriteForInput[]
    | MusicMarkCreateWithoutFavouriteForInput;
  connect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
}

export interface MusicMarkCreateWithoutFavouriteForInput {
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  musics?: MusicCreateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentCreateManyWithoutMusicMarkInput;
  likedBy?: UserCreateManyWithoutLikedMarksInput;
}

export interface MusicCreateManyWithoutMarksInput {
  create?: MusicCreateWithoutMarksInput[] | MusicCreateWithoutMarksInput;
  connect?: MusicWhereUniqueInput[] | MusicWhereUniqueInput;
}

export interface MusicCreateWithoutMarksInput {
  user: UserCreateOneInput;
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface MusicMarkCreateManyWithoutUserInput {
  create?: MusicMarkCreateWithoutUserInput[] | MusicMarkCreateWithoutUserInput;
  connect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
}

export interface MusicMarkCreateWithoutUserInput {
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  musics?: MusicCreateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentCreateManyWithoutMusicMarkInput;
  likedBy?: UserCreateManyWithoutLikedMarksInput;
  favouriteFor?: UserCreateManyWithoutFavouriteMarksInput;
}

export interface CommentCreateManyWithoutMusicMarkInput {
  create?:
    | CommentCreateWithoutMusicMarkInput[]
    | CommentCreateWithoutMusicMarkInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutMusicMarkInput {
  description: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCommentsInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface MusicMarkCreateManyWithoutLikedByInput {
  create?:
    | MusicMarkCreateWithoutLikedByInput[]
    | MusicMarkCreateWithoutLikedByInput;
  connect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
}

export interface MusicMarkCreateWithoutLikedByInput {
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  musics?: MusicCreateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentCreateManyWithoutMusicMarkInput;
  favouriteFor?: UserCreateManyWithoutFavouriteMarksInput;
}

export interface UserCreateManyWithoutFavouriteMarksInput {
  create?:
    | UserCreateWithoutFavouriteMarksInput[]
    | UserCreateWithoutFavouriteMarksInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutFavouriteMarksInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutFollowersInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserCreateManyWithoutFriendsInput {
  create?: UserCreateWithoutFriendsInput[] | UserCreateWithoutFriendsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutFriendsInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserCreateManyWithoutFollowingsInput {
  create?:
    | UserCreateWithoutFollowingsInput[]
    | UserCreateWithoutFollowingsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutFollowingsInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserCreateManyWithoutBlockListInput {
  create?: UserCreateWithoutBlockListInput[] | UserCreateWithoutBlockListInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutBlockListInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserCreateManyWithoutLikedMarksInput {
  create?:
    | UserCreateWithoutLikedMarksInput[]
    | UserCreateWithoutLikedMarksInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutLikedMarksInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeCreateOneWithoutUserInput;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface CommentUpdateInput {
  musicMark?: MusicMarkUpdateOneRequiredWithoutCommentsInput;
  description?: String;
  author?: UserUpdateOneRequiredWithoutCommentsInput;
}

export interface MusicMarkUpdateOneRequiredWithoutCommentsInput {
  create?: MusicMarkCreateWithoutCommentsInput;
  update?: MusicMarkUpdateWithoutCommentsDataInput;
  upsert?: MusicMarkUpsertWithoutCommentsInput;
  connect?: MusicMarkWhereUniqueInput;
}

export interface MusicMarkUpdateWithoutCommentsDataInput {
  user?: UserUpdateOneRequiredWithoutMusicMarksInput;
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  musics?: MusicUpdateManyWithoutMarksInput;
  spoiled?: Boolean;
  likedBy?: UserUpdateManyWithoutLikedMarksInput;
  favouriteFor?: UserUpdateManyWithoutFavouriteMarksInput;
}

export interface UserUpdateOneRequiredWithoutMusicMarksInput {
  create?: UserCreateWithoutMusicMarksInput;
  update?: UserUpdateWithoutMusicMarksDataInput;
  upsert?: UserUpsertWithoutMusicMarksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutMusicMarksDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface HomeUpdateOneWithoutUserInput {
  create?: HomeCreateWithoutUserInput;
  update?: HomeUpdateWithoutUserDataInput;
  upsert?: HomeUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: HomeWhereUniqueInput;
}

export interface HomeUpdateWithoutUserDataInput {
  latitude?: Float;
  longitude?: Float;
  address?: String;
}

export interface HomeUpsertWithoutUserInput {
  update: HomeUpdateWithoutUserDataInput;
  create: HomeCreateWithoutUserInput;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  musicMark?: MusicMarkUpdateOneRequiredWithoutCommentsInput;
  description?: String;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  description?: String;
}

export interface MusicMarkUpdateManyWithoutFavouriteForInput {
  create?:
    | MusicMarkCreateWithoutFavouriteForInput[]
    | MusicMarkCreateWithoutFavouriteForInput;
  delete?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  connect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  set?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  disconnect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  update?:
    | MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput[]
    | MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput;
  upsert?:
    | MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput[]
    | MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput;
  deleteMany?: MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput;
  updateMany?:
    | MusicMarkUpdateManyWithWhereNestedInput[]
    | MusicMarkUpdateManyWithWhereNestedInput;
}

export interface MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput {
  where: MusicMarkWhereUniqueInput;
  data: MusicMarkUpdateWithoutFavouriteForDataInput;
}

export interface MusicMarkUpdateWithoutFavouriteForDataInput {
  user?: UserUpdateOneRequiredWithoutMusicMarksInput;
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  musics?: MusicUpdateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentUpdateManyWithoutMusicMarkInput;
  likedBy?: UserUpdateManyWithoutLikedMarksInput;
}

export interface MusicUpdateManyWithoutMarksInput {
  create?: MusicCreateWithoutMarksInput[] | MusicCreateWithoutMarksInput;
  delete?: MusicWhereUniqueInput[] | MusicWhereUniqueInput;
  connect?: MusicWhereUniqueInput[] | MusicWhereUniqueInput;
  set?: MusicWhereUniqueInput[] | MusicWhereUniqueInput;
  disconnect?: MusicWhereUniqueInput[] | MusicWhereUniqueInput;
  update?:
    | MusicUpdateWithWhereUniqueWithoutMarksInput[]
    | MusicUpdateWithWhereUniqueWithoutMarksInput;
  upsert?:
    | MusicUpsertWithWhereUniqueWithoutMarksInput[]
    | MusicUpsertWithWhereUniqueWithoutMarksInput;
  deleteMany?: MusicScalarWhereInput[] | MusicScalarWhereInput;
  updateMany?:
    | MusicUpdateManyWithWhereNestedInput[]
    | MusicUpdateManyWithWhereNestedInput;
}

export interface MusicUpdateWithWhereUniqueWithoutMarksInput {
  where: MusicWhereUniqueInput;
  data: MusicUpdateWithoutMarksDataInput;
}

export interface MusicUpdateWithoutMarksDataInput {
  user?: UserUpdateOneRequiredInput;
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri?: String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface MusicMarkUpdateManyWithoutUserInput {
  create?: MusicMarkCreateWithoutUserInput[] | MusicMarkCreateWithoutUserInput;
  delete?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  connect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  set?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  disconnect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  update?:
    | MusicMarkUpdateWithWhereUniqueWithoutUserInput[]
    | MusicMarkUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | MusicMarkUpsertWithWhereUniqueWithoutUserInput[]
    | MusicMarkUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput;
  updateMany?:
    | MusicMarkUpdateManyWithWhereNestedInput[]
    | MusicMarkUpdateManyWithWhereNestedInput;
}

export interface MusicMarkUpdateWithWhereUniqueWithoutUserInput {
  where: MusicMarkWhereUniqueInput;
  data: MusicMarkUpdateWithoutUserDataInput;
}

export interface MusicMarkUpdateWithoutUserDataInput {
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  musics?: MusicUpdateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentUpdateManyWithoutMusicMarkInput;
  likedBy?: UserUpdateManyWithoutLikedMarksInput;
  favouriteFor?: UserUpdateManyWithoutFavouriteMarksInput;
}

export interface CommentUpdateManyWithoutMusicMarkInput {
  create?:
    | CommentCreateWithoutMusicMarkInput[]
    | CommentCreateWithoutMusicMarkInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutMusicMarkInput[]
    | CommentUpdateWithWhereUniqueWithoutMusicMarkInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutMusicMarkInput[]
    | CommentUpsertWithWhereUniqueWithoutMusicMarkInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutMusicMarkInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutMusicMarkDataInput;
}

export interface CommentUpdateWithoutMusicMarkDataInput {
  description?: String;
  author?: UserUpdateOneRequiredWithoutCommentsInput;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  update?: UserUpdateWithoutCommentsDataInput;
  upsert?: UserUpsertWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCommentsDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface MusicMarkUpdateManyWithoutLikedByInput {
  create?:
    | MusicMarkCreateWithoutLikedByInput[]
    | MusicMarkCreateWithoutLikedByInput;
  delete?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  connect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  set?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  disconnect?: MusicMarkWhereUniqueInput[] | MusicMarkWhereUniqueInput;
  update?:
    | MusicMarkUpdateWithWhereUniqueWithoutLikedByInput[]
    | MusicMarkUpdateWithWhereUniqueWithoutLikedByInput;
  upsert?:
    | MusicMarkUpsertWithWhereUniqueWithoutLikedByInput[]
    | MusicMarkUpsertWithWhereUniqueWithoutLikedByInput;
  deleteMany?: MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput;
  updateMany?:
    | MusicMarkUpdateManyWithWhereNestedInput[]
    | MusicMarkUpdateManyWithWhereNestedInput;
}

export interface MusicMarkUpdateWithWhereUniqueWithoutLikedByInput {
  where: MusicMarkWhereUniqueInput;
  data: MusicMarkUpdateWithoutLikedByDataInput;
}

export interface MusicMarkUpdateWithoutLikedByDataInput {
  user?: UserUpdateOneRequiredWithoutMusicMarksInput;
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  musics?: MusicUpdateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentUpdateManyWithoutMusicMarkInput;
  favouriteFor?: UserUpdateManyWithoutFavouriteMarksInput;
}

export interface UserUpdateManyWithoutFavouriteMarksInput {
  create?:
    | UserCreateWithoutFavouriteMarksInput[]
    | UserCreateWithoutFavouriteMarksInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFavouriteMarksInput[]
    | UserUpdateWithWhereUniqueWithoutFavouriteMarksInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFavouriteMarksInput[]
    | UserUpsertWithWhereUniqueWithoutFavouriteMarksInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutFavouriteMarksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFavouriteMarksDataInput;
}

export interface UserUpdateWithoutFavouriteMarksDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpdateManyWithoutFriendsInput {
  create?: UserCreateWithoutFriendsInput[] | UserCreateWithoutFriendsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFriendsInput[]
    | UserUpdateWithWhereUniqueWithoutFriendsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFriendsInput[]
    | UserUpsertWithWhereUniqueWithoutFriendsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFriendsDataInput;
}

export interface UserUpdateWithoutFriendsDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpdateManyWithoutFollowingsInput {
  create?:
    | UserCreateWithoutFollowingsInput[]
    | UserCreateWithoutFollowingsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowingsInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowingsInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingsDataInput;
}

export interface UserUpdateWithoutFollowingsDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpdateManyWithoutBlockListInput {
  create?: UserCreateWithoutBlockListInput[] | UserCreateWithoutBlockListInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBlockListInput[]
    | UserUpdateWithWhereUniqueWithoutBlockListInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBlockListInput[]
    | UserUpsertWithWhereUniqueWithoutBlockListInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutBlockListInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockListDataInput;
}

export interface UserUpdateWithoutBlockListDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpsertWithWhereUniqueWithoutBlockListInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockListDataInput;
  create: UserCreateWithoutBlockListInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  isEmailActive?: Boolean;
  isEmailActive_not?: Boolean;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  isPhoneNumberActive?: Boolean;
  isPhoneNumberActive_not?: Boolean;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  soundCloudToken?: String;
  soundCloudToken_not?: String;
  soundCloudToken_in?: String[] | String;
  soundCloudToken_not_in?: String[] | String;
  soundCloudToken_lt?: String;
  soundCloudToken_lte?: String;
  soundCloudToken_gt?: String;
  soundCloudToken_gte?: String;
  soundCloudToken_contains?: String;
  soundCloudToken_not_contains?: String;
  soundCloudToken_starts_with?: String;
  soundCloudToken_not_starts_with?: String;
  soundCloudToken_ends_with?: String;
  soundCloudToken_not_ends_with?: String;
  lastLogin?: DateTimeInput;
  lastLogin_not?: DateTimeInput;
  lastLogin_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_not_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_lt?: DateTimeInput;
  lastLogin_lte?: DateTimeInput;
  lastLogin_gt?: DateTimeInput;
  lastLogin_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingsDataInput;
  create: UserCreateWithoutFollowingsInput;
}

export interface UserUpsertWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFriendsDataInput;
  create: UserCreateWithoutFriendsInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithWhereUniqueWithoutFavouriteMarksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFavouriteMarksDataInput;
  create: UserCreateWithoutFavouriteMarksInput;
}

export interface MusicMarkUpsertWithWhereUniqueWithoutLikedByInput {
  where: MusicMarkWhereUniqueInput;
  update: MusicMarkUpdateWithoutLikedByDataInput;
  create: MusicMarkCreateWithoutLikedByInput;
}

export interface MusicMarkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  spoiled?: Boolean;
  spoiled_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput;
  OR?: MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput;
  NOT?: MusicMarkScalarWhereInput[] | MusicMarkScalarWhereInput;
}

export interface MusicMarkUpdateManyWithWhereNestedInput {
  where: MusicMarkScalarWhereInput;
  data: MusicMarkUpdateManyDataInput;
}

export interface MusicMarkUpdateManyDataInput {
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  spoiled?: Boolean;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutMusicMarkInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutMusicMarkDataInput;
  create: CommentCreateWithoutMusicMarkInput;
}

export interface UserUpdateManyWithoutLikedMarksInput {
  create?:
    | UserCreateWithoutLikedMarksInput[]
    | UserCreateWithoutLikedMarksInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutLikedMarksInput[]
    | UserUpdateWithWhereUniqueWithoutLikedMarksInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutLikedMarksInput[]
    | UserUpsertWithWhereUniqueWithoutLikedMarksInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutLikedMarksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutLikedMarksDataInput;
}

export interface UserUpdateWithoutLikedMarksDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpsertWithWhereUniqueWithoutLikedMarksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutLikedMarksDataInput;
  create: UserCreateWithoutLikedMarksInput;
}

export interface MusicMarkUpsertWithWhereUniqueWithoutUserInput {
  where: MusicMarkWhereUniqueInput;
  update: MusicMarkUpdateWithoutUserDataInput;
  create: MusicMarkCreateWithoutUserInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MusicUpsertWithWhereUniqueWithoutMarksInput {
  where: MusicWhereUniqueInput;
  update: MusicUpdateWithoutMarksDataInput;
  create: MusicCreateWithoutMarksInput;
}

export interface MusicScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  singer?: String;
  singer_not?: String;
  singer_in?: String[] | String;
  singer_not_in?: String[] | String;
  singer_lt?: String;
  singer_lte?: String;
  singer_gt?: String;
  singer_gte?: String;
  singer_contains?: String;
  singer_not_contains?: String;
  singer_starts_with?: String;
  singer_not_starts_with?: String;
  singer_ends_with?: String;
  singer_not_ends_with?: String;
  duration?: Float;
  duration_not?: Float;
  duration_in?: Float[] | Float;
  duration_not_in?: Float[] | Float;
  duration_lt?: Float;
  duration_lte?: Float;
  duration_gt?: Float;
  duration_gte?: Float;
  uri?: String;
  uri_not?: String;
  uri_in?: String[] | String;
  uri_not_in?: String[] | String;
  uri_lt?: String;
  uri_lte?: String;
  uri_gt?: String;
  uri_gte?: String;
  uri_contains?: String;
  uri_not_contains?: String;
  uri_starts_with?: String;
  uri_not_starts_with?: String;
  uri_ends_with?: String;
  uri_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MusicScalarWhereInput[] | MusicScalarWhereInput;
  OR?: MusicScalarWhereInput[] | MusicScalarWhereInput;
  NOT?: MusicScalarWhereInput[] | MusicScalarWhereInput;
}

export interface MusicUpdateManyWithWhereNestedInput {
  where: MusicScalarWhereInput;
  data: MusicUpdateManyDataInput;
}

export interface MusicUpdateManyDataInput {
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri?: String;
}

export interface MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput {
  where: MusicMarkWhereUniqueInput;
  update: MusicMarkUpdateWithoutFavouriteForDataInput;
  create: MusicMarkCreateWithoutFavouriteForInput;
}

export interface UserUpsertWithoutMusicMarksInput {
  update: UserUpdateWithoutMusicMarksDataInput;
  create: UserCreateWithoutMusicMarksInput;
}

export interface MusicMarkUpsertWithoutCommentsInput {
  update: MusicMarkUpdateWithoutCommentsDataInput;
  create: MusicMarkCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  description?: String;
}

export interface HomeCreateInput {
  user: UserCreateOneWithoutHomeLocationInput;
  latitude: Float;
  longitude: Float;
  address?: String;
}

export interface UserCreateOneWithoutHomeLocationInput {
  create?: UserCreateWithoutHomeLocationInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutHomeLocationInput {
  username: String;
  password: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  musicMarks?: MusicMarkCreateManyWithoutUserInput;
  comments?: CommentCreateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkCreateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkCreateManyWithoutLikedByInput;
  followings?: UserCreateManyWithoutFollowersInput;
  followers?: UserCreateManyWithoutFollowingsInput;
  friends?: UserCreateManyWithoutFriendsInput;
  blockList?: UserCreateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface HomeUpdateInput {
  user?: UserUpdateOneRequiredWithoutHomeLocationInput;
  latitude?: Float;
  longitude?: Float;
  address?: String;
}

export interface UserUpdateOneRequiredWithoutHomeLocationInput {
  create?: UserCreateWithoutHomeLocationInput;
  update?: UserUpdateWithoutHomeLocationDataInput;
  upsert?: UserUpsertWithoutHomeLocationInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutHomeLocationDataInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpsertWithoutHomeLocationInput {
  update: UserUpdateWithoutHomeLocationDataInput;
  create: UserCreateWithoutHomeLocationInput;
}

export interface HomeUpdateManyMutationInput {
  latitude?: Float;
  longitude?: Float;
  address?: String;
}

export interface MusicCreateInput {
  user: UserCreateOneInput;
  marks: MusicMarkCreateOneWithoutMusicsInput;
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri: String;
}

export interface MusicMarkCreateOneWithoutMusicsInput {
  create?: MusicMarkCreateWithoutMusicsInput;
  connect?: MusicMarkWhereUniqueInput;
}

export interface MusicMarkCreateWithoutMusicsInput {
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  spoiled?: Boolean;
  comments?: CommentCreateManyWithoutMusicMarkInput;
  likedBy?: UserCreateManyWithoutLikedMarksInput;
  favouriteFor?: UserCreateManyWithoutFavouriteMarksInput;
}

export interface MusicUpdateInput {
  user?: UserUpdateOneRequiredInput;
  marks?: MusicMarkUpdateOneRequiredWithoutMusicsInput;
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri?: String;
}

export interface MusicMarkUpdateOneRequiredWithoutMusicsInput {
  create?: MusicMarkCreateWithoutMusicsInput;
  update?: MusicMarkUpdateWithoutMusicsDataInput;
  upsert?: MusicMarkUpsertWithoutMusicsInput;
  connect?: MusicMarkWhereUniqueInput;
}

export interface MusicMarkUpdateWithoutMusicsDataInput {
  user?: UserUpdateOneRequiredWithoutMusicMarksInput;
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  spoiled?: Boolean;
  comments?: CommentUpdateManyWithoutMusicMarkInput;
  likedBy?: UserUpdateManyWithoutLikedMarksInput;
  favouriteFor?: UserUpdateManyWithoutFavouriteMarksInput;
}

export interface MusicMarkUpsertWithoutMusicsInput {
  update: MusicMarkUpdateWithoutMusicsDataInput;
  create: MusicMarkCreateWithoutMusicsInput;
}

export interface MusicUpdateManyMutationInput {
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri?: String;
}

export interface MusicMarkCreateInput {
  user: UserCreateOneWithoutMusicMarksInput;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  musics?: MusicCreateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentCreateManyWithoutMusicMarkInput;
  likedBy?: UserCreateManyWithoutLikedMarksInput;
  favouriteFor?: UserCreateManyWithoutFavouriteMarksInput;
}

export interface MusicMarkUpdateInput {
  user?: UserUpdateOneRequiredWithoutMusicMarksInput;
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  musics?: MusicUpdateManyWithoutMarksInput;
  spoiled?: Boolean;
  comments?: CommentUpdateManyWithoutMusicMarkInput;
  likedBy?: UserUpdateManyWithoutLikedMarksInput;
  favouriteFor?: UserUpdateManyWithoutFavouriteMarksInput;
}

export interface MusicMarkUpdateManyMutationInput {
  latitude?: Float;
  longitude?: Float;
  title?: String;
  description?: String;
  spoiled?: Boolean;
}

export interface UserUpdateInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  homeLocation?: HomeUpdateOneWithoutUserInput;
  musicMarks?: MusicMarkUpdateManyWithoutUserInput;
  comments?: CommentUpdateManyWithoutAuthorInput;
  favouriteMarks?: MusicMarkUpdateManyWithoutFavouriteForInput;
  likedMarks?: MusicMarkUpdateManyWithoutLikedByInput;
  followings?: UserUpdateManyWithoutFollowersInput;
  followers?: UserUpdateManyWithoutFollowingsInput;
  friends?: UserUpdateManyWithoutFriendsInput;
  blockList?: UserUpdateManyWithoutBlockListInput;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  password?: String;
  email?: String;
  isEmailActive?: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive?: Boolean;
  firstName?: String;
  lastName?: String;
  soundCloudToken?: String;
  lastLogin?: DateTimeInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface HomeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HomeWhereInput;
  AND?: HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput;
  OR?: HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput;
  NOT?: HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput;
}

export interface MusicSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MusicWhereInput;
  AND?: MusicSubscriptionWhereInput[] | MusicSubscriptionWhereInput;
  OR?: MusicSubscriptionWhereInput[] | MusicSubscriptionWhereInput;
  NOT?: MusicSubscriptionWhereInput[] | MusicSubscriptionWhereInput;
}

export interface MusicMarkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MusicMarkWhereInput;
  AND?: MusicMarkSubscriptionWhereInput[] | MusicMarkSubscriptionWhereInput;
  OR?: MusicMarkSubscriptionWhereInput[] | MusicMarkSubscriptionWhereInput;
  NOT?: MusicMarkSubscriptionWhereInput[] | MusicMarkSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  description: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  musicMark: <T = MusicMarkPromise>() => T;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  musicMark: <T = MusicMarkSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface MusicMark {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  spoiled: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicMarkPromise extends Promise<MusicMark>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  musics: <T = FragmentableArray<Music>>(
    args?: {
      where?: MusicWhereInput;
      orderBy?: MusicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  spoiled: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likedBy: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  favouriteFor: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicMarkSubscription
  extends Promise<AsyncIterator<MusicMark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  musics: <T = Promise<AsyncIterator<MusicSubscription>>>(
    args?: {
      where?: MusicWhereInput;
      orderBy?: MusicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  spoiled: () => Promise<AsyncIterator<Boolean>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likedBy: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  favouriteFor: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  email?: String;
  isEmailActive: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive: Boolean;
  firstName?: String;
  lastName?: String;
  soundCloudToken?: String;
  lastLogin?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  isEmailActive: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  isPhoneNumberActive: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  homeLocation: <T = HomePromise>() => T;
  musicMarks: <T = FragmentableArray<MusicMark>>(
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  favouriteMarks: <T = FragmentableArray<MusicMark>>(
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likedMarks: <T = FragmentableArray<MusicMark>>(
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followings: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followers: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  friends: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  blockList: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  soundCloudToken: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  isEmailActive: () => Promise<AsyncIterator<Boolean>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  isPhoneNumberActive: () => Promise<AsyncIterator<Boolean>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  homeLocation: <T = HomeSubscription>() => T;
  musicMarks: <T = Promise<AsyncIterator<MusicMarkSubscription>>>(
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  favouriteMarks: <T = Promise<AsyncIterator<MusicMarkSubscription>>>(
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likedMarks: <T = Promise<AsyncIterator<MusicMarkSubscription>>>(
    args?: {
      where?: MusicMarkWhereInput;
      orderBy?: MusicMarkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followings: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  friends: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  blockList: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  soundCloudToken: () => Promise<AsyncIterator<String>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Home {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HomePromise extends Promise<Home>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HomeSubscription
  extends Promise<AsyncIterator<Home>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Music {
  id: ID_Output;
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicPromise extends Promise<Music>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  marks: <T = MusicMarkPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  singer: () => Promise<String>;
  duration: () => Promise<Float>;
  uri: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicSubscription
  extends Promise<AsyncIterator<Music>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  marks: <T = MusicMarkSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  uri: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HomeConnection {
  pageInfo: PageInfo;
  edges: HomeEdge[];
}

export interface HomeConnectionPromise
  extends Promise<HomeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HomeEdge>>() => T;
  aggregate: <T = AggregateHomePromise>() => T;
}

export interface HomeConnectionSubscription
  extends Promise<AsyncIterator<HomeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HomeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHomeSubscription>() => T;
}

export interface HomeEdge {
  node: Home;
  cursor: String;
}

export interface HomeEdgePromise extends Promise<HomeEdge>, Fragmentable {
  node: <T = HomePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HomeEdgeSubscription
  extends Promise<AsyncIterator<HomeEdge>>,
    Fragmentable {
  node: <T = HomeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHome {
  count: Int;
}

export interface AggregateHomePromise
  extends Promise<AggregateHome>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHomeSubscription
  extends Promise<AsyncIterator<AggregateHome>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MusicConnection {
  pageInfo: PageInfo;
  edges: MusicEdge[];
}

export interface MusicConnectionPromise
  extends Promise<MusicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MusicEdge>>() => T;
  aggregate: <T = AggregateMusicPromise>() => T;
}

export interface MusicConnectionSubscription
  extends Promise<AsyncIterator<MusicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MusicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMusicSubscription>() => T;
}

export interface MusicEdge {
  node: Music;
  cursor: String;
}

export interface MusicEdgePromise extends Promise<MusicEdge>, Fragmentable {
  node: <T = MusicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MusicEdgeSubscription
  extends Promise<AsyncIterator<MusicEdge>>,
    Fragmentable {
  node: <T = MusicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMusic {
  count: Int;
}

export interface AggregateMusicPromise
  extends Promise<AggregateMusic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMusicSubscription
  extends Promise<AsyncIterator<AggregateMusic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MusicMarkConnection {
  pageInfo: PageInfo;
  edges: MusicMarkEdge[];
}

export interface MusicMarkConnectionPromise
  extends Promise<MusicMarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MusicMarkEdge>>() => T;
  aggregate: <T = AggregateMusicMarkPromise>() => T;
}

export interface MusicMarkConnectionSubscription
  extends Promise<AsyncIterator<MusicMarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MusicMarkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMusicMarkSubscription>() => T;
}

export interface MusicMarkEdge {
  node: MusicMark;
  cursor: String;
}

export interface MusicMarkEdgePromise
  extends Promise<MusicMarkEdge>,
    Fragmentable {
  node: <T = MusicMarkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MusicMarkEdgeSubscription
  extends Promise<AsyncIterator<MusicMarkEdge>>,
    Fragmentable {
  node: <T = MusicMarkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMusicMark {
  count: Int;
}

export interface AggregateMusicMarkPromise
  extends Promise<AggregateMusicMark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMusicMarkSubscription
  extends Promise<AsyncIterator<AggregateMusicMark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  description: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface HomeSubscriptionPayload {
  mutation: MutationType;
  node: Home;
  updatedFields: String[];
  previousValues: HomePreviousValues;
}

export interface HomeSubscriptionPayloadPromise
  extends Promise<HomeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HomePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HomePreviousValuesPromise>() => T;
}

export interface HomeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HomeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HomeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HomePreviousValuesSubscription>() => T;
}

export interface HomePreviousValues {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HomePreviousValuesPromise
  extends Promise<HomePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HomePreviousValuesSubscription
  extends Promise<AsyncIterator<HomePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MusicSubscriptionPayload {
  mutation: MutationType;
  node: Music;
  updatedFields: String[];
  previousValues: MusicPreviousValues;
}

export interface MusicSubscriptionPayloadPromise
  extends Promise<MusicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MusicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MusicPreviousValuesPromise>() => T;
}

export interface MusicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MusicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MusicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MusicPreviousValuesSubscription>() => T;
}

export interface MusicPreviousValues {
  id: ID_Output;
  title?: String;
  description?: String;
  singer?: String;
  duration?: Float;
  uri: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicPreviousValuesPromise
  extends Promise<MusicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  singer: () => Promise<String>;
  duration: () => Promise<Float>;
  uri: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicPreviousValuesSubscription
  extends Promise<AsyncIterator<MusicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  uri: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MusicMarkSubscriptionPayload {
  mutation: MutationType;
  node: MusicMark;
  updatedFields: String[];
  previousValues: MusicMarkPreviousValues;
}

export interface MusicMarkSubscriptionPayloadPromise
  extends Promise<MusicMarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MusicMarkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MusicMarkPreviousValuesPromise>() => T;
}

export interface MusicMarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MusicMarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MusicMarkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MusicMarkPreviousValuesSubscription>() => T;
}

export interface MusicMarkPreviousValues {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
  title?: String;
  description?: String;
  spoiled: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MusicMarkPreviousValuesPromise
  extends Promise<MusicMarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  spoiled: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MusicMarkPreviousValuesSubscription
  extends Promise<AsyncIterator<MusicMarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  spoiled: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  email?: String;
  isEmailActive: Boolean;
  phoneNumber?: String;
  isPhoneNumberActive: Boolean;
  firstName?: String;
  lastName?: String;
  soundCloudToken?: String;
  lastLogin?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  isEmailActive: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  isPhoneNumberActive: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  soundCloudToken: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  isEmailActive: () => Promise<AsyncIterator<Boolean>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  isPhoneNumberActive: () => Promise<AsyncIterator<Boolean>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  soundCloudToken: () => Promise<AsyncIterator<String>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Home",
    embedded: false
  },
  {
    name: "Music",
    embedded: false
  },
  {
    name: "MusicMark",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
