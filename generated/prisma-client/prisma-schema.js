module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHome {
  count: Int!
}

type AggregateMusic {
  count: Int!
}

type AggregateMusicMark {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Home {
  id: ID!
  user: User!
  latitude: Float!
  longitude: Float!
  address: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HomeConnection {
  pageInfo: PageInfo!
  edges: [HomeEdge]!
  aggregate: AggregateHome!
}

input HomeCreateInput {
  user: UserCreateOneWithoutHomeLocationInput!
  latitude: Float!
  longitude: Float!
  address: String
}

input HomeCreateOneWithoutUserInput {
  create: HomeCreateWithoutUserInput
  connect: HomeWhereUniqueInput
}

input HomeCreateWithoutUserInput {
  latitude: Float!
  longitude: Float!
  address: String
}

type HomeEdge {
  node: Home!
  cursor: String!
}

enum HomeOrderByInput {
  id_ASC
  id_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  address_ASC
  address_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HomePreviousValues {
  id: ID!
  latitude: Float!
  longitude: Float!
  address: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HomeSubscriptionPayload {
  mutation: MutationType!
  node: Home
  updatedFields: [String!]
  previousValues: HomePreviousValues
}

input HomeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HomeWhereInput
  AND: [HomeSubscriptionWhereInput!]
  OR: [HomeSubscriptionWhereInput!]
  NOT: [HomeSubscriptionWhereInput!]
}

input HomeUpdateInput {
  user: UserUpdateOneRequiredWithoutHomeLocationInput
  latitude: Float
  longitude: Float
  address: String
}

input HomeUpdateManyMutationInput {
  latitude: Float
  longitude: Float
  address: String
}

input HomeUpdateOneWithoutUserInput {
  create: HomeCreateWithoutUserInput
  update: HomeUpdateWithoutUserDataInput
  upsert: HomeUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: HomeWhereUniqueInput
}

input HomeUpdateWithoutUserDataInput {
  latitude: Float
  longitude: Float
  address: String
}

input HomeUpsertWithoutUserInput {
  update: HomeUpdateWithoutUserDataInput!
  create: HomeCreateWithoutUserInput!
}

input HomeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
}

input HomeWhereUniqueInput {
  id: ID
}

scalar Long

type Music {
  id: ID!
  user: User!
  marks(where: MusicMarkWhereInput, orderBy: MusicMarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MusicMark!]
  title: String
  singer: String
  duration: Float
  uri: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MusicConnection {
  pageInfo: PageInfo!
  edges: [MusicEdge]!
  aggregate: AggregateMusic!
}

input MusicCreateInput {
  user: UserCreateOneInput!
  marks: MusicMarkCreateManyWithoutMusicsInput
  title: String
  singer: String
  duration: Float
  uri: String!
}

input MusicCreateManyWithoutMarksInput {
  create: [MusicCreateWithoutMarksInput!]
  connect: [MusicWhereUniqueInput!]
}

input MusicCreateWithoutMarksInput {
  user: UserCreateOneInput!
  title: String
  singer: String
  duration: Float
  uri: String!
}

type MusicEdge {
  node: Music!
  cursor: String!
}

type MusicMark {
  id: ID!
  user: User!
  latitude: Float!
  longitude: Float!
  musics(where: MusicWhereInput, orderBy: MusicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Music!]
  spoiled: Boolean!
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  favouriteFor(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MusicMarkConnection {
  pageInfo: PageInfo!
  edges: [MusicMarkEdge]!
  aggregate: AggregateMusicMark!
}

input MusicMarkCreateInput {
  user: UserCreateOneWithoutMusicMarksInput!
  latitude: Float!
  longitude: Float!
  musics: MusicCreateManyWithoutMarksInput
  spoiled: Boolean
  likedBy: UserCreateManyWithoutLikedMarksInput
  favouriteFor: UserCreateManyWithoutFavouriteMarksInput
}

input MusicMarkCreateManyWithoutFavouriteForInput {
  create: [MusicMarkCreateWithoutFavouriteForInput!]
  connect: [MusicMarkWhereUniqueInput!]
}

input MusicMarkCreateManyWithoutLikedByInput {
  create: [MusicMarkCreateWithoutLikedByInput!]
  connect: [MusicMarkWhereUniqueInput!]
}

input MusicMarkCreateManyWithoutMusicsInput {
  create: [MusicMarkCreateWithoutMusicsInput!]
  connect: [MusicMarkWhereUniqueInput!]
}

input MusicMarkCreateManyWithoutUserInput {
  create: [MusicMarkCreateWithoutUserInput!]
  connect: [MusicMarkWhereUniqueInput!]
}

input MusicMarkCreateWithoutFavouriteForInput {
  user: UserCreateOneWithoutMusicMarksInput!
  latitude: Float!
  longitude: Float!
  musics: MusicCreateManyWithoutMarksInput
  spoiled: Boolean
  likedBy: UserCreateManyWithoutLikedMarksInput
}

input MusicMarkCreateWithoutLikedByInput {
  user: UserCreateOneWithoutMusicMarksInput!
  latitude: Float!
  longitude: Float!
  musics: MusicCreateManyWithoutMarksInput
  spoiled: Boolean
  favouriteFor: UserCreateManyWithoutFavouriteMarksInput
}

input MusicMarkCreateWithoutMusicsInput {
  user: UserCreateOneWithoutMusicMarksInput!
  latitude: Float!
  longitude: Float!
  spoiled: Boolean
  likedBy: UserCreateManyWithoutLikedMarksInput
  favouriteFor: UserCreateManyWithoutFavouriteMarksInput
}

input MusicMarkCreateWithoutUserInput {
  latitude: Float!
  longitude: Float!
  musics: MusicCreateManyWithoutMarksInput
  spoiled: Boolean
  likedBy: UserCreateManyWithoutLikedMarksInput
  favouriteFor: UserCreateManyWithoutFavouriteMarksInput
}

type MusicMarkEdge {
  node: MusicMark!
  cursor: String!
}

enum MusicMarkOrderByInput {
  id_ASC
  id_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  spoiled_ASC
  spoiled_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MusicMarkPreviousValues {
  id: ID!
  latitude: Float!
  longitude: Float!
  spoiled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MusicMarkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  spoiled: Boolean
  spoiled_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MusicMarkScalarWhereInput!]
  OR: [MusicMarkScalarWhereInput!]
  NOT: [MusicMarkScalarWhereInput!]
}

type MusicMarkSubscriptionPayload {
  mutation: MutationType!
  node: MusicMark
  updatedFields: [String!]
  previousValues: MusicMarkPreviousValues
}

input MusicMarkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MusicMarkWhereInput
  AND: [MusicMarkSubscriptionWhereInput!]
  OR: [MusicMarkSubscriptionWhereInput!]
  NOT: [MusicMarkSubscriptionWhereInput!]
}

input MusicMarkUpdateInput {
  user: UserUpdateOneRequiredWithoutMusicMarksInput
  latitude: Float
  longitude: Float
  musics: MusicUpdateManyWithoutMarksInput
  spoiled: Boolean
  likedBy: UserUpdateManyWithoutLikedMarksInput
  favouriteFor: UserUpdateManyWithoutFavouriteMarksInput
}

input MusicMarkUpdateManyDataInput {
  latitude: Float
  longitude: Float
  spoiled: Boolean
}

input MusicMarkUpdateManyMutationInput {
  latitude: Float
  longitude: Float
  spoiled: Boolean
}

input MusicMarkUpdateManyWithoutFavouriteForInput {
  create: [MusicMarkCreateWithoutFavouriteForInput!]
  delete: [MusicMarkWhereUniqueInput!]
  connect: [MusicMarkWhereUniqueInput!]
  set: [MusicMarkWhereUniqueInput!]
  disconnect: [MusicMarkWhereUniqueInput!]
  update: [MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput!]
  upsert: [MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput!]
  deleteMany: [MusicMarkScalarWhereInput!]
  updateMany: [MusicMarkUpdateManyWithWhereNestedInput!]
}

input MusicMarkUpdateManyWithoutLikedByInput {
  create: [MusicMarkCreateWithoutLikedByInput!]
  delete: [MusicMarkWhereUniqueInput!]
  connect: [MusicMarkWhereUniqueInput!]
  set: [MusicMarkWhereUniqueInput!]
  disconnect: [MusicMarkWhereUniqueInput!]
  update: [MusicMarkUpdateWithWhereUniqueWithoutLikedByInput!]
  upsert: [MusicMarkUpsertWithWhereUniqueWithoutLikedByInput!]
  deleteMany: [MusicMarkScalarWhereInput!]
  updateMany: [MusicMarkUpdateManyWithWhereNestedInput!]
}

input MusicMarkUpdateManyWithoutMusicsInput {
  create: [MusicMarkCreateWithoutMusicsInput!]
  delete: [MusicMarkWhereUniqueInput!]
  connect: [MusicMarkWhereUniqueInput!]
  set: [MusicMarkWhereUniqueInput!]
  disconnect: [MusicMarkWhereUniqueInput!]
  update: [MusicMarkUpdateWithWhereUniqueWithoutMusicsInput!]
  upsert: [MusicMarkUpsertWithWhereUniqueWithoutMusicsInput!]
  deleteMany: [MusicMarkScalarWhereInput!]
  updateMany: [MusicMarkUpdateManyWithWhereNestedInput!]
}

input MusicMarkUpdateManyWithoutUserInput {
  create: [MusicMarkCreateWithoutUserInput!]
  delete: [MusicMarkWhereUniqueInput!]
  connect: [MusicMarkWhereUniqueInput!]
  set: [MusicMarkWhereUniqueInput!]
  disconnect: [MusicMarkWhereUniqueInput!]
  update: [MusicMarkUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MusicMarkUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MusicMarkScalarWhereInput!]
  updateMany: [MusicMarkUpdateManyWithWhereNestedInput!]
}

input MusicMarkUpdateManyWithWhereNestedInput {
  where: MusicMarkScalarWhereInput!
  data: MusicMarkUpdateManyDataInput!
}

input MusicMarkUpdateWithoutFavouriteForDataInput {
  user: UserUpdateOneRequiredWithoutMusicMarksInput
  latitude: Float
  longitude: Float
  musics: MusicUpdateManyWithoutMarksInput
  spoiled: Boolean
  likedBy: UserUpdateManyWithoutLikedMarksInput
}

input MusicMarkUpdateWithoutLikedByDataInput {
  user: UserUpdateOneRequiredWithoutMusicMarksInput
  latitude: Float
  longitude: Float
  musics: MusicUpdateManyWithoutMarksInput
  spoiled: Boolean
  favouriteFor: UserUpdateManyWithoutFavouriteMarksInput
}

input MusicMarkUpdateWithoutMusicsDataInput {
  user: UserUpdateOneRequiredWithoutMusicMarksInput
  latitude: Float
  longitude: Float
  spoiled: Boolean
  likedBy: UserUpdateManyWithoutLikedMarksInput
  favouriteFor: UserUpdateManyWithoutFavouriteMarksInput
}

input MusicMarkUpdateWithoutUserDataInput {
  latitude: Float
  longitude: Float
  musics: MusicUpdateManyWithoutMarksInput
  spoiled: Boolean
  likedBy: UserUpdateManyWithoutLikedMarksInput
  favouriteFor: UserUpdateManyWithoutFavouriteMarksInput
}

input MusicMarkUpdateWithWhereUniqueWithoutFavouriteForInput {
  where: MusicMarkWhereUniqueInput!
  data: MusicMarkUpdateWithoutFavouriteForDataInput!
}

input MusicMarkUpdateWithWhereUniqueWithoutLikedByInput {
  where: MusicMarkWhereUniqueInput!
  data: MusicMarkUpdateWithoutLikedByDataInput!
}

input MusicMarkUpdateWithWhereUniqueWithoutMusicsInput {
  where: MusicMarkWhereUniqueInput!
  data: MusicMarkUpdateWithoutMusicsDataInput!
}

input MusicMarkUpdateWithWhereUniqueWithoutUserInput {
  where: MusicMarkWhereUniqueInput!
  data: MusicMarkUpdateWithoutUserDataInput!
}

input MusicMarkUpsertWithWhereUniqueWithoutFavouriteForInput {
  where: MusicMarkWhereUniqueInput!
  update: MusicMarkUpdateWithoutFavouriteForDataInput!
  create: MusicMarkCreateWithoutFavouriteForInput!
}

input MusicMarkUpsertWithWhereUniqueWithoutLikedByInput {
  where: MusicMarkWhereUniqueInput!
  update: MusicMarkUpdateWithoutLikedByDataInput!
  create: MusicMarkCreateWithoutLikedByInput!
}

input MusicMarkUpsertWithWhereUniqueWithoutMusicsInput {
  where: MusicMarkWhereUniqueInput!
  update: MusicMarkUpdateWithoutMusicsDataInput!
  create: MusicMarkCreateWithoutMusicsInput!
}

input MusicMarkUpsertWithWhereUniqueWithoutUserInput {
  where: MusicMarkWhereUniqueInput!
  update: MusicMarkUpdateWithoutUserDataInput!
  create: MusicMarkCreateWithoutUserInput!
}

input MusicMarkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  musics_every: MusicWhereInput
  musics_some: MusicWhereInput
  musics_none: MusicWhereInput
  spoiled: Boolean
  spoiled_not: Boolean
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
  favouriteFor_every: UserWhereInput
  favouriteFor_some: UserWhereInput
  favouriteFor_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MusicMarkWhereInput!]
  OR: [MusicMarkWhereInput!]
  NOT: [MusicMarkWhereInput!]
}

input MusicMarkWhereUniqueInput {
  id: ID
}

enum MusicOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  singer_ASC
  singer_DESC
  duration_ASC
  duration_DESC
  uri_ASC
  uri_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MusicPreviousValues {
  id: ID!
  title: String
  singer: String
  duration: Float
  uri: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MusicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  singer: String
  singer_not: String
  singer_in: [String!]
  singer_not_in: [String!]
  singer_lt: String
  singer_lte: String
  singer_gt: String
  singer_gte: String
  singer_contains: String
  singer_not_contains: String
  singer_starts_with: String
  singer_not_starts_with: String
  singer_ends_with: String
  singer_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MusicScalarWhereInput!]
  OR: [MusicScalarWhereInput!]
  NOT: [MusicScalarWhereInput!]
}

type MusicSubscriptionPayload {
  mutation: MutationType!
  node: Music
  updatedFields: [String!]
  previousValues: MusicPreviousValues
}

input MusicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MusicWhereInput
  AND: [MusicSubscriptionWhereInput!]
  OR: [MusicSubscriptionWhereInput!]
  NOT: [MusicSubscriptionWhereInput!]
}

input MusicUpdateInput {
  user: UserUpdateOneRequiredInput
  marks: MusicMarkUpdateManyWithoutMusicsInput
  title: String
  singer: String
  duration: Float
  uri: String
}

input MusicUpdateManyDataInput {
  title: String
  singer: String
  duration: Float
  uri: String
}

input MusicUpdateManyMutationInput {
  title: String
  singer: String
  duration: Float
  uri: String
}

input MusicUpdateManyWithoutMarksInput {
  create: [MusicCreateWithoutMarksInput!]
  delete: [MusicWhereUniqueInput!]
  connect: [MusicWhereUniqueInput!]
  set: [MusicWhereUniqueInput!]
  disconnect: [MusicWhereUniqueInput!]
  update: [MusicUpdateWithWhereUniqueWithoutMarksInput!]
  upsert: [MusicUpsertWithWhereUniqueWithoutMarksInput!]
  deleteMany: [MusicScalarWhereInput!]
  updateMany: [MusicUpdateManyWithWhereNestedInput!]
}

input MusicUpdateManyWithWhereNestedInput {
  where: MusicScalarWhereInput!
  data: MusicUpdateManyDataInput!
}

input MusicUpdateWithoutMarksDataInput {
  user: UserUpdateOneRequiredInput
  title: String
  singer: String
  duration: Float
  uri: String
}

input MusicUpdateWithWhereUniqueWithoutMarksInput {
  where: MusicWhereUniqueInput!
  data: MusicUpdateWithoutMarksDataInput!
}

input MusicUpsertWithWhereUniqueWithoutMarksInput {
  where: MusicWhereUniqueInput!
  update: MusicUpdateWithoutMarksDataInput!
  create: MusicCreateWithoutMarksInput!
}

input MusicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  marks_every: MusicMarkWhereInput
  marks_some: MusicMarkWhereInput
  marks_none: MusicMarkWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  singer: String
  singer_not: String
  singer_in: [String!]
  singer_not_in: [String!]
  singer_lt: String
  singer_lte: String
  singer_gt: String
  singer_gte: String
  singer_contains: String
  singer_not_contains: String
  singer_starts_with: String
  singer_not_starts_with: String
  singer_ends_with: String
  singer_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MusicWhereInput!]
  OR: [MusicWhereInput!]
  NOT: [MusicWhereInput!]
}

input MusicWhereUniqueInput {
  id: ID
}

type Mutation {
  createHome(data: HomeCreateInput!): Home!
  updateHome(data: HomeUpdateInput!, where: HomeWhereUniqueInput!): Home
  updateManyHomes(data: HomeUpdateManyMutationInput!, where: HomeWhereInput): BatchPayload!
  upsertHome(where: HomeWhereUniqueInput!, create: HomeCreateInput!, update: HomeUpdateInput!): Home!
  deleteHome(where: HomeWhereUniqueInput!): Home
  deleteManyHomes(where: HomeWhereInput): BatchPayload!
  createMusic(data: MusicCreateInput!): Music!
  updateMusic(data: MusicUpdateInput!, where: MusicWhereUniqueInput!): Music
  updateManyMusics(data: MusicUpdateManyMutationInput!, where: MusicWhereInput): BatchPayload!
  upsertMusic(where: MusicWhereUniqueInput!, create: MusicCreateInput!, update: MusicUpdateInput!): Music!
  deleteMusic(where: MusicWhereUniqueInput!): Music
  deleteManyMusics(where: MusicWhereInput): BatchPayload!
  createMusicMark(data: MusicMarkCreateInput!): MusicMark!
  updateMusicMark(data: MusicMarkUpdateInput!, where: MusicMarkWhereUniqueInput!): MusicMark
  updateManyMusicMarks(data: MusicMarkUpdateManyMutationInput!, where: MusicMarkWhereInput): BatchPayload!
  upsertMusicMark(where: MusicMarkWhereUniqueInput!, create: MusicMarkCreateInput!, update: MusicMarkUpdateInput!): MusicMark!
  deleteMusicMark(where: MusicMarkWhereUniqueInput!): MusicMark
  deleteManyMusicMarks(where: MusicMarkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  home(where: HomeWhereUniqueInput!): Home
  homes(where: HomeWhereInput, orderBy: HomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Home]!
  homesConnection(where: HomeWhereInput, orderBy: HomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HomeConnection!
  music(where: MusicWhereUniqueInput!): Music
  musics(where: MusicWhereInput, orderBy: MusicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Music]!
  musicsConnection(where: MusicWhereInput, orderBy: MusicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MusicConnection!
  musicMark(where: MusicMarkWhereUniqueInput!): MusicMark
  musicMarks(where: MusicMarkWhereInput, orderBy: MusicMarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MusicMark]!
  musicMarksConnection(where: MusicMarkWhereInput, orderBy: MusicMarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MusicMarkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  home(where: HomeSubscriptionWhereInput): HomeSubscriptionPayload
  music(where: MusicSubscriptionWhereInput): MusicSubscriptionPayload
  musicMark(where: MusicMarkSubscriptionWhereInput): MusicMarkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean!
  phoneNumber: String
  isPhoneNumberActive: Boolean!
  firstName: String
  lastName: String
  homeLocation: Home
  musicMarks(where: MusicMarkWhereInput, orderBy: MusicMarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MusicMark!]
  favouriteMarks(where: MusicMarkWhereInput, orderBy: MusicMarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MusicMark!]
  likedMarks(where: MusicMarkWhereInput, orderBy: MusicMarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MusicMark!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  blockList(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  soundCloudToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateManyWithoutBlockListInput {
  create: [UserCreateWithoutBlockListInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFavouriteMarksInput {
  create: [UserCreateWithoutFavouriteMarksInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFriendsInput {
  create: [UserCreateWithoutFriendsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedMarksInput {
  create: [UserCreateWithoutLikedMarksInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutHomeLocationInput {
  create: UserCreateWithoutHomeLocationInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMusicMarksInput {
  create: UserCreateWithoutMusicMarksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBlockListInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  soundCloudToken: String
}

input UserCreateWithoutFavouriteMarksInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateWithoutFollowersInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateWithoutFollowingInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateWithoutFriendsInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateWithoutHomeLocationInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateWithoutLikedMarksInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  musicMarks: MusicMarkCreateManyWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserCreateWithoutMusicMarksInput {
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeCreateOneWithoutUserInput
  favouriteMarks: MusicMarkCreateManyWithoutFavouriteForInput
  likedMarks: MusicMarkCreateManyWithoutLikedByInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  friends: UserCreateManyWithoutFriendsInput
  blockList: UserCreateManyWithoutBlockListInput
  soundCloudToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  isEmailActive_ASC
  isEmailActive_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  isPhoneNumberActive_ASC
  isPhoneNumberActive_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  soundCloudToken_ASC
  soundCloudToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  email: String
  isEmailActive: Boolean!
  phoneNumber: String
  isPhoneNumberActive: Boolean!
  firstName: String
  lastName: String
  soundCloudToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  isEmailActive: Boolean
  isEmailActive_not: Boolean
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  isPhoneNumberActive: Boolean
  isPhoneNumberActive_not: Boolean
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  soundCloudToken: String
  soundCloudToken_not: String
  soundCloudToken_in: [String!]
  soundCloudToken_not_in: [String!]
  soundCloudToken_lt: String
  soundCloudToken_lte: String
  soundCloudToken_gt: String
  soundCloudToken_gte: String
  soundCloudToken_contains: String
  soundCloudToken_not_contains: String
  soundCloudToken_starts_with: String
  soundCloudToken_not_starts_with: String
  soundCloudToken_ends_with: String
  soundCloudToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateManyDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  soundCloudToken: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  soundCloudToken: String
}

input UserUpdateManyWithoutBlockListInput {
  create: [UserCreateWithoutBlockListInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBlockListInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBlockListInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFavouriteMarksInput {
  create: [UserCreateWithoutFavouriteMarksInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavouriteMarksInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavouriteMarksInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFriendsInput {
  create: [UserCreateWithoutFriendsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFriendsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFriendsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutLikedMarksInput {
  create: [UserCreateWithoutLikedMarksInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedMarksInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedMarksInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutHomeLocationInput {
  create: UserCreateWithoutHomeLocationInput
  update: UserUpdateWithoutHomeLocationDataInput
  upsert: UserUpsertWithoutHomeLocationInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMusicMarksInput {
  create: UserCreateWithoutMusicMarksInput
  update: UserUpdateWithoutMusicMarksDataInput
  upsert: UserUpsertWithoutMusicMarksInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBlockListDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  soundCloudToken: String
}

input UserUpdateWithoutFavouriteMarksDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithoutFollowersDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithoutFollowingDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithoutFriendsDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithoutHomeLocationDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithoutLikedMarksDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  musicMarks: MusicMarkUpdateManyWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithoutMusicMarksDataInput {
  username: String
  password: String
  email: String
  isEmailActive: Boolean
  phoneNumber: String
  isPhoneNumberActive: Boolean
  firstName: String
  lastName: String
  homeLocation: HomeUpdateOneWithoutUserInput
  favouriteMarks: MusicMarkUpdateManyWithoutFavouriteForInput
  likedMarks: MusicMarkUpdateManyWithoutLikedByInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  friends: UserUpdateManyWithoutFriendsInput
  blockList: UserUpdateManyWithoutBlockListInput
  soundCloudToken: String
}

input UserUpdateWithWhereUniqueWithoutBlockListInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutBlockListDataInput!
}

input UserUpdateWithWhereUniqueWithoutFavouriteMarksInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavouriteMarksDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFriendsDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedMarksInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedMarksDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutHomeLocationInput {
  update: UserUpdateWithoutHomeLocationDataInput!
  create: UserCreateWithoutHomeLocationInput!
}

input UserUpsertWithoutMusicMarksInput {
  update: UserUpdateWithoutMusicMarksDataInput!
  create: UserCreateWithoutMusicMarksInput!
}

input UserUpsertWithWhereUniqueWithoutBlockListInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutBlockListDataInput!
  create: UserCreateWithoutBlockListInput!
}

input UserUpsertWithWhereUniqueWithoutFavouriteMarksInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavouriteMarksDataInput!
  create: UserCreateWithoutFavouriteMarksInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutFriendsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFriendsDataInput!
  create: UserCreateWithoutFriendsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedMarksInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedMarksDataInput!
  create: UserCreateWithoutLikedMarksInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  isEmailActive: Boolean
  isEmailActive_not: Boolean
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  isPhoneNumberActive: Boolean
  isPhoneNumberActive_not: Boolean
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  homeLocation: HomeWhereInput
  musicMarks_every: MusicMarkWhereInput
  musicMarks_some: MusicMarkWhereInput
  musicMarks_none: MusicMarkWhereInput
  favouriteMarks_every: MusicMarkWhereInput
  favouriteMarks_some: MusicMarkWhereInput
  favouriteMarks_none: MusicMarkWhereInput
  likedMarks_every: MusicMarkWhereInput
  likedMarks_some: MusicMarkWhereInput
  likedMarks_none: MusicMarkWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  blockList_every: UserWhereInput
  blockList_some: UserWhereInput
  blockList_none: UserWhereInput
  soundCloudToken: String
  soundCloudToken_not: String
  soundCloudToken_in: [String!]
  soundCloudToken_not_in: [String!]
  soundCloudToken_lt: String
  soundCloudToken_lte: String
  soundCloudToken_gt: String
  soundCloudToken_gte: String
  soundCloudToken_contains: String
  soundCloudToken_not_contains: String
  soundCloudToken_starts_with: String
  soundCloudToken_not_starts_with: String
  soundCloudToken_ends_with: String
  soundCloudToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  phoneNumber: String
}
`
      }
    